apply from: "$rootDir/gradle/utils.gradle"

idea {
    module {
        inheritOutputDirs = false
        outputDir = file('py/build/main')
        testOutputDir = file('py/build/test')
    }
}

description = "PySparkling - Sparkling-Water Python Package"

dependencies {
  compile project(path: ':sparkling-water-assembly', configuration: 'shadow')
}

//
// Create a file with version for Python dist task
//
task createVersionFile << {
    if(!getBuildDir().exists()){
        getBuildDir().mkdir()
    }
    File version_file = new File(getBuildDir(), "version.txt")
    def version_txt = version.replace("-SNAPSHOT","")
    version_file.write(version_txt)
}

//
// Represents a location of H2O Wheel Package
//
def h2oPythonWheelPackageLocation = "http://h2o-release.s3.amazonaws.com/h2o/${h2oMajorName != "master" ? "rel-${h2oMajorName}" : "master"}/${h2oBuild}/Python/h2o-${h2oMajorVersion}.${h2oBuild}-py2.py3-none-any.whl"

//
// Prepare Python environment to execute python commands
//
def preparePythonEnv(environment) {
    def SPARK_HOME = ext.sparkHome
    def py4jDir = SPARK_HOME + File.separator + "python" + File.separator + "lib"
    def py4jfile = new FileNameByRegexFinder().getFileNames(py4jDir, "py4j-.*-src.zip").get(0)
    if (SPARK_HOME != null) {
        environment['PYTHONPATH'] = SPARK_HOME + File.separator + "python" + File.pathSeparator + py4jfile
                                    File.pathSeparator + environment['PYTHONPATH']
    }
}

//
// Initial task checking setup of all properties required
// by Python build
//
task checkPythonEnv << {
    def SPARK_HOME = sparkHome
    def H2O_HOME = System.getenv("H2O_HOME")
    def H2O_PYTHON_WHEEL = System.getenv("H2O_PYTHON_WHEEL")

    if (SPARK_HOME == null) throw new InvalidUserDataException("SPARK_HOME needs to be defined!")

    if (H2O_HOME == null && H2O_PYTHON_WHEEL == null) {
        throw new InvalidUserDataException("""
Both properties H2O_HOME and H2O_PYTHON_WHEEL were not found!

Please specify:
 - H2O_HOME to point to H2O Git repo version ${h2oMajorVersion}.${h2oBuild}
or
 - H2O_PYTHON_WHEEL to point to downloaded H2O Python Wheel package version ${h2oMajorVersion}.${h2oBuild}
   For example:

    mkdir -p \$(pwd)/private/
    curl -s ${h2oPythonWheelPackageLocation} > \$(pwd)/private/h2o.whl
    export H2O_PYTHON_WHEEL=\$(pwd)/private/h2o.whl
""")
    }

    if(H2O_HOME != null && H2O_PYTHON_WHEEL !=null){
        logger.info("Both \"H2O_HOME\" and \"H2O_PYTHON_WHEEL\" properties are set. Using \"H2O_HOME\"!")
    }

}

def copyH2OFromH2OHome(String H2O_HOME){
        copy {
            from "${H2O_HOME}/h2o-py/h2o"
            into getBuildDir().absolutePath + File.separator + "h2o"
        }
}

def copyH2OFromH2OWheel(String H2O_PYTHON_WHEEL){
        copy {
            from zipTree(H2O_PYTHON_WHEEL)
            into getBuildDir().absolutePath
            include 'h2o/**'
        }
}

//
// Make PySparkling distribution egg package
//
task distPython(type: Exec, dependsOn: checkPythonEnv) {
    doFirst {
        preparePythonEnv(environment)
        def H2O_HOME = System.getenv("H2O_HOME")
        def H2O_PYTHON_WHEEL = System.getenv("H2O_PYTHON_WHEEL")

        if(H2O_HOME !=null && H2O_PYTHON_WHEEL !=null){
            // if both properties are set, give precedence to H2O_HOME
            copyH2OFromH2OHome(H2O_HOME)
        }else if(H2O_HOME!=null){
            copyH2OFromH2OHome(H2O_HOME)
        }else if(H2O_PYTHON_WHEEL!=null){
            copyH2OFromH2OWheel(H2O_PYTHON_WHEEL)
        }


        copy {
            from "${configurations.compile.join(',')}"
            into  getBuildDir().absolutePath + File.separator + 'sparkling_water'
            rename ".*", "sparkling_water_assembly.jar"
        }
        (new File(getBuildDir(), "sparkling_water" + File.separator + "__init__.py")).write("#Sparkling-water JAR holder for pySparkling module.")
    }
    commandLine getOsSpecificCommandLine(["python", "setup.py", "egg_info", "--egg-base=${getBuildDir().absolutePath}", "bdist_egg",  "--dist-dir=${getBuildDir().absolutePath+File.separator}dist", ])
}

configurations{
    eggs
}

artifacts {
    eggs new File(getBuildDir().absolutePath + File.separator + "dist/h2o_pysparkling_${version.substring(0, version.lastIndexOf('.'))}-${version.replace("-SNAPSHOT","")}-py2.7.egg").getAbsoluteFile()
}
//
// Test python against Spark cloud
//
task testPython(type: Exec, dependsOn: [configurations.compile, distPython] ) {
    doFirst{
        preparePythonEnv(environment)
    }
    // add PySparkling egg on PYTHONPATH so unittests can see all the modules within this egg file
    environment['PYTHONPATH'] = configurations.eggs.artifacts.file.join(File.separator) +  File.pathSeparator + environment['PYTHONPATH']
    environment['SPARK_WORKER_DIR'] = file('build/h2ologs-pyunit/nodes')
    environment['SPARK_CONF_DIR'] = file("tests/conf/pyunit")
    commandLine getOsSpecificCommandLine(["python", "tests/tests_unit.py"])
}

//
// Run python integration tests
//
task integTestPython(type: Exec, dependsOn: [configurations.compile, distPython] ) {
    doFirst{
        preparePythonEnv(environment)
    }
    def testEnv = detectEnvironment()

    // Pass references to libraries to test launcher
    environment["sparkling.pysparkling.egg"] = configurations.eggs.artifacts.file.join(File.separator)
    environment["spark.testing"] = "true"
    environment["spark.test.home"] = "${sparkHome}"
    environment["sparkling.test.hdp.version"] = "${hdpVersion}"
    if (sparkMaster != null)
        environment["spark.master"] = "${sparkMaster}"

    // Decide which tests should be launch here based on environment
    switch (testEnv) {
        case "yarn":
            environment["sparkling.test.environment"] = "${testEnv}"
            environment["spark.ext.h2o.node.log.dir"] = "h2ologs-itest-${testEnv}/nodes"
            environment["spark.ext.h2o.client.log.dir"] =  "h2ologs-itest-${testEnv}/client"

            commandLine getOsSpecificCommandLine(["python", "tests/tests_integ_yarn.py"])
            break

        case "standalone":
            environment["sparkling.test.environment"] = "${testEnv}"
            environment["spark.ext.h2o.node.log.dir"] = "h2ologs-itest-${testEnv}/nodes"
            environment["spark.ext.h2o.client.log.dir"] = "h2ologs-itest-${testEnv}/client"

            commandLine getOsSpecificCommandLine(["python", "tests/tests_integ_standalone.py"])
            break

        case "local":
            environment["sparkling.test.environment"] = "${testEnv}"
            environment["spark.ext.h2o.node.log.dir"] = new File(project.getBuildDir(), "h2ologs-itest-${testEnv}/nodes").getAbsolutePath()
            environment["spark.ext.h2o.client.log.dir"] = new File(project.getBuildDir(), "h2ologs-itest-${testEnv}/client").getAbsolutePath()

            commandLine getOsSpecificCommandLine(["python", "tests/tests_integ_local.py"])
            break
    }
}

// Run integration tests as part of build
check.dependsOn integTestPython

//
// Cleanup
//
task cleanPython(type: Delete) {
    delete getBuildDir()
}

//
// Just print location of H2O Python Wheel package with respect to a configured version of H2O dependency
//
task printH2OWheelPackage << {
    description = "Print location of H2O Python Wheel package for download"
    println(h2oPythonWheelPackageLocation)
}

//
// Setup execution graph
//
clean.dependsOn cleanPython
createVersionFile.dependsOn cleanPython
distPython.dependsOn createVersionFile

// Build tasks
task buildPython(dependsOn: distPython)
build.dependsOn buildPython

test.dependsOn testPython

def detectEnvironment(defaultEnv = "local") {
    def denv = [ project.hasProperty("sparklingTestEnv") ? project["sparklingTestEnv"] : null,
                    System.properties["sparklingTestEnv"],
                    defaultEnv
    ].find { h -> h!=null } // first match
    // Return env
    logger.info("* Detected '$denv' Sparkling test environment (configure via property 'sparklingTestEnv')")
    denv
}
