description = "PySparkling - Sparkling Water Python Package"

apply from: "$rootDir/gradle/utils.gradle"
apply plugin: 'ru.vyarus.use-python'

import ru.vyarus.gradle.plugin.python.cmd.Python

def getPythonVersion() {
  Python p = new Python(project, python.getPythonPath(), python.getPythonBinary())
  return p.version
}

ext {
  FS = File.separator
  FPS = File.pathSeparator
  pythonBinary = findProperty("pythonBinary") ?: "python"
  pkgDir = file("$buildDir/pkg")
  distDir = file("$buildDir/dist")
  condaDir = file("$buildDir/conda/h2o_pysparkling_${sparkMajorVersion}")
  wheelFile = file("${rootDir}/.gradle/wheels/h2o-${h2oMajorVersion}.${h2oBuild}-py2.py3-none-any.whl")
}

// Define the environment required to run tests
python {
  if (project.hasProperty("pythonBinary")) {
    pythonBinary project.findProperty("pythonBinary").toString()
  }
  if (project.hasProperty("pythonPath")) {
    pythonPath project.findProperty("pythonPath").toString()
  }

  pip "pytz:2019.1" // Needed in Integration tests, but not PySparkling dependency
  pip "pytest:4.6.5" // For running tests
  pip "tabulate:0.8.3"
  pip "requests:2.21.0"
  pip "future:0.17.1"
  pip "colorama:0.3.8"
  pip "numpy:1.16.5"
  pip "pyspark:${sparkVersion}"
  if (project.hasProperty("pythonEnvBasePath")) {
    // for CI as we use pre-cached environment
    envPath "${project.findProperty("pythonEnvBasePath")}/${getPythonVersion()}/${sparkVersion}"
  } else {
    envPath "${rootDir}/.gradle/python/${getPythonVersion()}/${sparkVersion}"
  }
}

configurations {
  sparklingWaterAssemblyJar
  apiGeneration
}

dependencies {
  sparklingWaterAssemblyJar project(path: ':sparkling-water-assembly', configuration: 'shadow')
  apiGeneration "org.scala-lang:scala-library:${scalaVersion}"
  apiGeneration project(path: ':sparkling-water-api-generation', configuration: 'shadow')
  apiGeneration project(path: ':sparkling-water-assembly', configuration: 'shadow')
  apiGeneration "org.apache.spark:spark-repl_${scalaBaseVersion}:${sparkVersion}"
}

//
// Create a file with version for Python dist task
//
task createVersionFile {
  doLast {
    def versionFileDir = new File(pkgDir, "ai/h2o/sparkling")
    if (!versionFileDir.exists()) {
      versionFileDir.mkdirs()
    }
    File version_file = new File(versionFileDir, "version.txt")

    def version_txt = version
    version_file.write(version_txt)
  }
}

//
// Represents a location of H2O Wheel Package
//
def h2oPythonWheelPackageLocation() {
  def suffix = "${h2oBuild}/Python/h2o-${h2oMajorVersion}.${h2oBuild}-py2.py3-none-any.whl"
  def prefix = "http://h2o-release.s3.amazonaws.com/h2o"
  if (h2oMajorName == "master") {
    return "${prefix}/master/${suffix}"
  } else {
    return "${prefix}/rel-${h2oMajorName}/${suffix}"
  }
}


static def downloadH2OWheel(String url, File out) {
  if (!out.parentFile.exists()) {
    out.parentFile.mkdirs()
  }

  if (!out.exists()) {
    new URL(url).withInputStream { i -> out.withOutputStream { it << i } }
  }
}

//
// Initial task checking setup of all properties required
// by Python build
//
task checkPythonEnv {
  doLast {
    def H2O_HOME = System.getenv("H2O_HOME")
    def H2O_DRIVER_JAR = System.getenv("H2O_DRIVER_JAR")

    if (H2O_HOME == null) {
      downloadH2OWheel(h2oPythonWheelPackageLocation(), wheelFile)
    } else {
      logger.info("Using \"H2O_HOME\" to specify H2O python package location!")
    }

    // if the spark.ext.h2o.backend.cluster.mode is set to external, then
    // we need to have also H2O_DRIVER_JAR property set in order to be able to perform tests
    if (detectBackendClusterMode() == "external" && H2O_DRIVER_JAR == null) {
      throw new InvalidUserDataException("""When running tests on external H2O cluster, H2O_DRIVER_JAR property is required.
Download H2O driver for the corresonding hadoop distribution via the shell script ``./bin/get-h2o-driver.sh`` and
and please set it, for example as:

export H2O_DRIVER_JAR=/path/to/h2o-driver.jar
                                  """)
    }
  }
}

def copyPySetup() {

  copy {
    from("$projectDir/src") {
      include 'setup.py'
    }
    filter {
      it.replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkMajorVersion)
        .replaceAll("SUBST_SPARK_VERSION", sparkVersion)
        .replaceAll("SUBST_SW_VERSION", version.substring(0, version.lastIndexOf("-")).replace("-", "_"))
        .replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkMajorVersion)
    }
    into pkgDir
  }

  copy {
    from("$projectDir") {
      include 'README.rst'
    }
    into pkgDir
  }

  copy {
    from("$projectDir/src") {
      include 'MANIFEST.in'
      include 'setup.cfg'
      include 'pysparkling/**/*'
      include 'ai/**/*'
      exclude '**/*.pyc'
    }
    into pkgDir
  }

  copy {
    from("$projectDir/src-gen") {
      include 'ai/**/*'
      exclude '**/*.pyc'
    }
    into pkgDir
  }

  copy {
    from("$projectDir/conda/h2o_pysparkling_SUBST_SPARK_MAJOR_VERSION") {
      include 'bld.bat'
      include 'build.sh'
    }
    into condaDir
  }

  copy {
    from("$projectDir/conda/h2o_pysparkling_SUBST_SPARK_MAJOR_VERSION") {
      include 'meta.yaml'
    }
    filter {
      it.replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkMajorVersion)
        .replaceAll("SUBST_SPARK_VERSION", sparkVersion)
        .replaceAll("SUBST_SW_VERSION", version.substring(0, version.lastIndexOf("-")).replace("-", "_"))
    }
    into condaDir
  }
}


def copyH2OFromH2OHome(String h2oHome) {
  copy {
    from "${h2oHome}/h2o-py/h2o"
    into file("${project.pkgDir}/h2o")
    exclude '**/*.pyc'
    exclude '**/h2o.jar'
  }
}

def copyH2OFromH2OWheel(File h2oPythonWheel) {
  copy {
    from zipTree(h2oPythonWheel)
    into file("${project.pkgDir}")
    include 'h2o/**'
    exclude '**/*.pyc'
    exclude '**/h2o.jar'
  }
}

//
// Make PySparkling distribution zip package
//
task distPython(type: Zip, dependsOn: [checkPythonEnv, configurations.sparklingWaterAssemblyJar]) {

  doFirst {
    def H2O_HOME = System.getenv("H2O_HOME")

    // if both properties are set, give precedence to H2O_HOME
    if (H2O_HOME != null) {
      copyH2OFromH2OHome(H2O_HOME)
    } else {
      copyH2OFromH2OWheel(wheelFile)
    }
    // Copy basic python setup
    copyPySetup()
    def replaceStr =
      """
import zipfile
from os import path

if '.zip' in here:
    try:
        with zipfile.ZipFile(path.dirname(here), 'r') as archive:
            __buildinfo__ = archive.read('h2o/buildinfo.txt').decode('utf-8').strip()
    except:
        __buildinfo__ = "unknown"
else:
    try:
        with open(path.join(here, 'buildinfo.txt'), encoding='utf-8') as f:
            __buildinfo__ = f.read().strip()
    except:
         __buildinfo__ = "unknown"

if '.zip' in here:
    try:
        with zipfile.ZipFile(path.dirname(here), 'r') as archive:
            __version__ = archive.read('h2o/version.txt').decode('utf-8').strip()
    except:
        __version__ = "0.0.local"
else:
    try:
        with open(path.join(here, 'version.txt'), encoding='utf-8') as f:
            __version__ = f.read().strip()
    except:
         __version__ = "0.0.local"
                """

    // Change __init__.py in H2O to be aware of being zipped
    def initFile = file("${project.pkgDir}/h2o/__init__.py")
    def initContent = initFile.readLines()
    def lineStart = initContent.findIndexOf { it == "try:" }
    def lineEnd = initContent.findIndexOf { it == "    __version__ = \"0.0.local\"" }
    if (lineStart != -1 && lineEnd != -1) {
      def before = initContent.subList(0, lineStart).join("\n")
      def full = before + replaceStr + initContent.subList(lineEnd + 1, initContent.size()).join("\n")
      initFile.write(full)
    }

    // Copy sparkling water assembly jar
    def fatJar = configurations.sparklingWaterAssemblyJar.singleFile
    copy {
      from fatJar
      into file("${project.pkgDir}/sparkling_water")
      rename ".*", "sparkling_water_assembly.jar"
    }
    // Save comment into module file
    file("${project.pkgDir}/sparkling_water/").mkdir()
    file("${project.pkgDir}/sparkling_water/__init__.py").write("# Sparkling-water JAR holder for pySparkling module.")
  }
  // Configure proper name
  archiveBaseName = "h2o_pysparkling_${sparkMajorVersion}"

  from pkgDir
  destinationDirectory = distDir
}

configurations {
  sdist
}

artifacts {
  sdist distPython
}

def createUnitTestArgs() {
  return [
    "${distPython.archiveFile.get()}",
    "spark.ext.h2o.backend.cluster.mode=${detectBackendClusterMode()}",
    "spark.ext.h2o.external.disable.version.check=true"
  ]
}

def createIntegTestArgs() {
  return [
    "${distPython.archiveFile.get()}",
    "spark.testing=true",
    "spark.ext.h2o.backend.cluster.mode=${detectBackendClusterMode()}",
    "spark.test.home=${sparkHome}",
    "spark.ext.h2o.log.dir=${buildDir}/h2ologs-itest",
    "spark.ext.h2o.external.disable.version.check=true",
    "spark.ext.h2o.testing.path.to.sw.jar=${configurations.sparklingWaterAssemblyJar.singleFile}"
  ]
}

task testPythonMojoPipeline(type: PythonTask, dependsOn: distPython) {
  extraArgs(*createUnitTestArgs())
  command = "tests/test_runner.py tests/unit/with_runtime_spark/test_mojo_pipeline.py"
}

task testPython(type: PythonTask, dependsOn: distPython) {
  extraArgs(*createUnitTestArgs())
  command = "tests/test_runner.py 'tests/unit --ignore=tests/unit/with_runtime_spark/test_mojo_pipeline.py'"
}

if (project.property("testMojoPipeline") == "true") {
  testPython.dependsOn testPythonMojoPipeline
}

task integTestPython(type: PythonTask, dependsOn: [distPython, checkSparkVersionTask]) {
  extraArgs(*createIntegTestArgs())
  command = "tests/test_runner.py 'tests/integration --ignore=tests/integration/external_only'"
}

task integTestPythonExternal(type: PythonTask, dependsOn: [distPython, checkSparkVersionTask]) {
  extraArgs(*createIntegTestArgs())
  command = "tests/test_runner.py tests/integration/external_only"
}


//
// Just print location of H2O Python Wheel package with respect to a configured version of H2O dependency
//
task printH2OWheelPackage {
  doLast {
    description = "Print location of H2O Python Wheel package for download"
    println(h2oPythonWheelPackageLocation())
  }
}

//
// Cleanup
//
task cleanPython(type: Delete) {
  delete getBuildDir()
}

task cleanGeneratedApi(type: Delete) {
  delete "$projectDir/src-gen"
}

task generateAlgorithmApi(type: JavaExec, dependsOn: [cleanGeneratedApi, ':sparkling-water-api-generation:build']) {
  group = "Execution"
  classpath = files(* (configurations.apiGeneration.files as List))
  main = "ai.h2o.sparkling.api.generation.AlgorithmAPIRunner"
  args = ["py", "$projectDir/src-gen"]
  standardOutput = System.out
  errorOutput = System.err
}

task generateMOJOApi(type: JavaExec, dependsOn: [cleanGeneratedApi, ':sparkling-water-api-generation:build']) {
  group = "Execution"
  classpath = files(* (configurations.apiGeneration.files as List))
  main = "ai.h2o.sparkling.api.generation.MOJOModelAPIRunner"
  args = ["py", "$projectDir/src-gen"]
  standardOutput = System.out
  errorOutput = System.err
}

task generateConf(type: JavaExec, dependsOn: [cleanGeneratedApi, ':sparkling-water-api-generation:build']) {
  group = "Execution"
  classpath = files(* (configurations.apiGeneration.files as List))
  main = "ai.h2o.sparkling.api.generation.ConfigurationRunner"
  args = ["$projectDir/src-gen/ai/h2o/sparkling", "py"]
  standardOutput = System.out
  errorOutput = System.err
}

//
// Setup execution graph
//
clean.dependsOn cleanPython
clean.dependsOn cleanGeneratedApi
createVersionFile.dependsOn clean
distPython.dependsOn createVersionFile
distPython.dependsOn generateAlgorithmApi
distPython.dependsOn generateMOJOApi
distPython.dependsOn generateConf

build.dependsOn distPython
test.dependsOn testPython

if (detectBackendClusterMode() == "external") {
  integTest.dependsOn integTestPythonExternal
}
integTest.dependsOn integTestPython
