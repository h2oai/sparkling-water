description = "Sparkling Water Examples"

apply from: "$rootDir/gradle/utils.gradle"
apply from: "$rootDir/gradle/scriptsTest.gradle"

dependencies {
  // Sparkling Water Core
  compile( project(":sparkling-water-core") ) {
    exclude group: "javax.servlet", module: "servlet-api"
  }

 // Sparkling Water ML
 compile( project(":sparkling-water-ml") )

  // And Scala library
  compile "org.scala-lang:scala-library:${scalaVersion}"

  // Add streaming
  compile "org.apache.spark:spark-streaming_${scalaBaseVersion}:${sparkVersion}"

  // And use scalatest for Scala testing
  testCompile "org.scalatest:scalatest_${scalaBaseVersion}:2.2.1"
  testCompile "junit:junit:4.11"
  
  // Integration tests requirements
  integTestCompile "org.scalatest:scalatest_${scalaBaseVersion}:2.2.1"
  integTestCompile "junit:junit:4.11"

  // To enable Idea compiler even for integTestCode which use mllib
  /*integTestCompile*/ compile "org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}"

  // Put Spark Assembly on runtime path
  integTestRuntime fileTree(dir: new File((String) sparkHome, "lib/"), include: '*.jar' )
}

integTest {
// Pass references to libraries to test launcher
  systemProperty "spark.testing",   "true"
  systemProperty "spark.test.home", "${sparkHome}"
  systemProperty "sparkling.test.hdp.version", "${hdpVersion}"

  // Pass list of jars required for testing
  systemProperty "sparkling.assembly.jar", "${project(":sparkling-water-assembly").configurations.shadow.artifacts.file.join(',')}"
  systemProperty "sparkling.itest.jar", "${integTestJar.archivePath}"

  // Show standard out and standard error of the test JVM(s) on the console
  // DEBUG testLogging.showStandardStreams = true
}

// Setup test environment for scripts test
scriptsTest {
  systemProperty "spark.testing",   "true"
  systemProperty "spark.test.home", "${sparkHome}"
  systemProperty "sparkling.test.log.dir", new File(project.getBuildDir(), "h2ologs-test")
  systemProperty "spark.ext.h2o.node.log.dir", new File(project.getBuildDir(), "h2ologs-stest/nodes")
  systemProperty "spark.ext.h2o.client.log.dir", new File(project.getBuildDir(), "h2ologs-stest/client")

  // Set sparkling water assembly jar location
  systemProperty "sparkling.assembly.jar", "${project(":sparkling-water-assembly").configurations.shadow.artifacts.file.join(',')}"
  // Run with assertions ON
  enableAssertions = true
  // For a new JVM for each test class
  forkEvery = 1
  jvmArgs '-XX:MaxPermSize=384m'
  // Increase test runner memory
  maxHeapSize = "4g"
  // Working dir will be root project
  workingDir = rootDir
}

String detectEnvironment(String defaultEnv = "local") {
  String denv = [ project.hasProperty("sparklingTestEnv") ? project["sparklingTestEnv"] : null,
    System.properties["sparklingTestEnv"],
    defaultEnv
  ].find { h -> h!=null } // first match
  // Return env
  logger.info("* Detected '$denv' Sparkling test environment (configure via property 'sparklingTestEnv')")
  denv
}
