description = "Sparkling Water Benchmarks"

apply plugin: 'com.github.johnrengelman.shadow'
apply from: "$rootDir/gradle/shadowRuntime.gradle"
apply from: "$rootDir/gradle/utils.gradle"

dependencies {
    // Sparkling Water libraries
    compile project(":sparkling-water-ml")
    compile project(":sparkling-water-repl")
    compile(project(":sparkling-water-core")) {
        exclude group: "javax.servlet", module: "servlet-api"
    }

    // Spark libraries
    compile "org.apache.spark:spark-core_${scalaBaseVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-sql_${scalaBaseVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-repl_${scalaBaseVersion}:${sparkVersion}"
}

shadowJar {
    configurations = [project.configurations.shadowRuntime]

    mergeServiceFiles()

    relocate 'javassist', 'ai.h2o.javassist'
    relocate 'com.google.common', 'ai.h2o.com.google.common'
    relocate 'org.eclipse.jetty', 'ai.h2o.org.eclipse.jetty'
    relocate 'org.eclipse.jetty.orbit', 'ai.h2o.org.eclipse.jetty.orbit'

    from "$project.buildDir/resources/main" include '**/*'
    exclude 'www/flow/packs/test-*/**'
}

task buildH2OExtendedJar() {
    doLast {
        def outputStream = new ByteArrayOutputStream()
        exec {
            workingDir(project.parent.rootDir)
            commandLine './gradlew', '-PdoExtend', 'extendJar', '-PdownloadH2O=hdp2.6'
            standardOutput = outputStream
        }
        def h2oExtendedJar = outputStream.toString().readLines().find{ it.contains("extended") && it.endsWith('jar') }
        copy {
            from h2oExtendedJar
            into "${project.buildDir}/libs/"
            rename { _ -> "h2o-extended.jar" }
        }
        buildH2OExtendedJar.ext.fileName = h2oExtendedJar
    }
}

task buildH2OExtendedJarWithBenchmarks(type: Jar, dependsOn: buildH2OExtendedJar) {
    manifest{
        attributes 'Main-Class': 'water.hadoop.h2odriver'
    }
    version = ''
    archiveBaseName = "h2o-extended-with-benchmarks"
    zip64 true
    from "$buildDir/classes/scala/main/"
    from zipTree("$buildDir/libs/h2o-extended.jar")
}

task substituteTerraform(dependsOn: buildH2OExtendedJarWithBenchmarks) {
    doLast {
        def tfBaseDir = "${project.buildDir.toString()}/terraform/aws/"
        def tfScripts = ["${tfBaseDir}/variables.tf", "${tfBaseDir}/modules/emr/variables.tf", "${tfBaseDir}/modules/emr/main.tf"]
        tfScripts.each { path ->
            def contents = file(path).getText('UTF-8')
            contents = contents
                .replaceAll("SUBST_H2O_JAR_FILE", "$buildDir/libs/h2o-extended-with-benchmarks.jar")
                .replaceAll("SUBST_PACKAGE_FILE", "$buildDir/libs/sparkling-water-benchmarks_$scalaBaseVersion-$version-all.jar")
                .replaceAll("SUBST_SW_VERSION", version)
                .replaceAll("SUBST_SCALA_VERSION", scalaBaseVersion)
                .replaceAll("SUBST_EMR_VERSION", supportedEmrVersion)
            
            file(path).write(contents, 'UTF-8')
        }
    }
}

task copyTerraform(type: Copy) {
    from 'src/main/terraform'
    include "**/*.tf"
    into "build/terraform"
}

task cleanTerraform(type: Delete) {
    delete "build/terraform"
}

task cleanOutput(type: Delete) {
    delete "output"
}

task runBenchmarks{
    doLast {
        exec {
            def accessKey = project.property("aws_access_key")
            def secretKey = project.property("aws_secret_key")
            def publicKey = project.property("aws_ssh_public_key")

            environment("aws_access_key", accessKey)
            environment("aws_secret_key", secretKey)
            environment("aws_ssh_public_key", publicKey)

            commandLine "./run_benchmarks.sh"
        }
    }
}

copyTerraform.dependsOn cleanTerraform
substituteTerraform.dependsOn copyTerraform
build.dependsOn shadowJar
build.finalizedBy substituteTerraform
runBenchmarks.dependsOn build
runBenchmarks.dependsOn cleanOutput
