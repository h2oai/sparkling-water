#!/usr/bin/groovy
@Library('test-shared-library') _

// Job parameters
properties(
        [
                parameters(
                        [
                                booleanParam(name: 'updateNextImageVersion', defaultValue: true, description: 'Update Next Image Version'),
                        ]
                ),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)

node('docker') {
    cleanWs()
    checkout scm
    def commons = load 'ci/commons.groovy'
    def currentVersion = commons.getDockerImageVersion()
    def nextVersion = currentVersion + 1
    commons.internalH2ODockerLogin()

    stage("Build Docker Image") {
        sh "./gradlew :sparkling-water-ci:createDockerFile"
        dir("ci/build/docker") {
            sh """
            docker pull harbor.h2o.ai/opsh2oai/h2o-3-hadoop-hdp-2.2:76
            docker build -t harbor.h2o.ai/opsh2oai/sparkling_water_tests:${nextVersion} -f Dockerfile .
           """
        }
    }

    stage("Publish Image") {
        def registryId = commons.readFromInfraState("docker_registry_id")
        commons.withAWSCredentials {
            def loginCommand = commons.withAWSCLI {
                return sh(
                        script: "aws ecr get-login --region us-west-2 --no-include-email --registry-ids ${registryId}",
                        returnStdout: true
                ).trim()
            }
            def repoUrl = loginCommand.split(" ").last().replaceAll("https://", "")
            sh """
                $loginCommand
                docker pull harbor.h2o.ai/opsh2oai/sparkling_water_tests:${nextVersion}
                docker tag harbor.h2o.ai/opsh2oai/sparkling_water_tests:${nextVersion} $repoUrl/opsh2oai/sparkling_water_tests:${nextVersion}
                docker push $repoUrl/opsh2oai/sparkling_water_tests:${nextVersion}
                """
        }
    }

    stage("Update Next Image Version") {
        if (params.updateNextImageVersion.toBoolean()) {
            commons.withGit {
                def content = readFile("gradle.properties").replaceAll("dockerImageVersion=${currentVersion}", "dockerImageVersion=${nextVersion}")
                writeFile file: "gradle.properties", text: content
                commons.gitCommit(["gradle.properties"], "Update Docker Image Version")
            }
        }
    }
}
