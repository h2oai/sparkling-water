#!/usr/bin/groovy
@Library('test-shared-library') _

properties(
        [
                pipelineTriggers([cron('H 16 * * *')]),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)

def getKubernetesSparkVersions() {
    def versionLine = readFile("gradle.properties").split("\n").find() { line -> line.startsWith('supportedSparkVersions') }
    def sparkVersions = versionLine.split("=")[1].split(" ")

    def boundaryVersionLine = readFile("gradle.properties").split("\n").find() { line -> line.startsWith('kubernetesSupportSinceSpark') }
    def boundaryVersion = boundaryVersionLine.split("=")[1].split(" ")
    return sparkVersions.subList(boundaryVersion.indexOf(boundaryVersion), sparkVersions.size())
}

node("docker") {
    cleanWs()
    checkout scm
    def commons = load 'ci/commons.groovy'

    environment {
        DOCKER_REGISTRY_ID = ''
    }
    stage("Start EKS & ECR") {
        commons.withAWSCredentials {
            dir("kubernetes/src/terraform/aws") {
                sh "terraform init"
                sh "terraform apply -var aws_access_key=$AWS_ACCESS_KEY_ID -var aws_secret_key=${AWS_SECRET_ACCESS_KEY} -auto-approve"
                env.DOCKER_REGISTRY_ID = sh(
                        script: "terraform output docker_registry_id",
                        returnStdout: true
                ).trim()
            }
        }
    }


    parallel(getKubernetesSparkVersions().each { sparkMajorVersion ->
        stage("Build & Publish Images For Spark $sparkMajorVersion") {
            node('docker') {
                ws("${env.WORKSPACE}-spark-${sparkMajorVersion}") {
                    cleanWs()
                    checkout scm
                    sh """
                            ./gradlew dist -Pspark=$sparkMajorVersion
                            cd ./dist/build/zip
                            sw_dir=\$(ls)
                            cd sw_dir
                            ./bin/build/build-kubernetes-images.sh scala
                            ./bin/build/build-kubernetes-images.sh python
                            ./bin/build/build-kubernetes-images.sh r
                           """
                    def repoUrl = "${env.DOCKER_REGISTRY_ID}.dkr.ecr.us-east-2.amazonaws.com"
                    docker.withRegistry("https://${repoUrl}", 'ecr:us-east-2:SW_FULL_AWS_CREDS') {
                        sh """

            docker tag sparkling_water_tests:${nextVersion} $repoUrl/opsh2oai/sparkling_water_tests:${nextVersion}
            docker push $repoUrl/opsh2oai/sparkling_water_tests:${nextVersion}
            """
                    }
                    cleanWs()
                }
            }
        }
    })

    stage("Stop EKS & ECR") {
        dir("kubernetes/src/terraform/aws") {
            sh "terraform destroy -var aws_access_key=$AWS_ACCESS_KEY_ID -var aws_secret_key=${AWS_SECRET_ACCESS_KEY} -auto-approve"
        }
    }
}
