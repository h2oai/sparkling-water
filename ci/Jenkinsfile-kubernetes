#!/usr/bin/groovy
@Library('test-shared-library') _

properties(
        [
                pipelineTriggers([cron('H 16 * * *')]),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)

def getKubernetesSparkVersions() {
    def versionLine = readFile("gradle.properties").split("\n").find() { line -> line.startsWith('supportedSparkVersions') }
    def sparkVersions = versionLine.split("=")[1].split(" ").toList()

    def boundaryVersionLine = readFile("gradle.properties").split("\n").find() { line -> line.startsWith('kubernetesSupportSinceSpark') }
    def boundaryVersion = boundaryVersionLine.split("=")[1]
    def list = new ArrayList<String>()
    list.addAll(sparkVersions.subList(sparkVersions.indexOf(boundaryVersion), sparkVersions.size()))
    return list
}

def getSparklingVersion(sparkMajorVersion) {
    def versionLine = readFile("gradle.properties").split("\n").find() { line -> line.startsWith('version') }
    return "${versionLine.split("=")[1].replace("-SNAPSHOT", "")}-${sparkMajorVersion}"
}

String getSparkVersion(sparkMajorVersion) {
    def versionLine = readFile("gradle-spark${sparkMajorVersion}.properties").split("\n").find() { line -> line.startsWith('sparkVersion') }
    return versionLine.split("=")[1]
}

def getBuildAndPublishStage(sparkMajorVersion) {
    return {
        stage("Build & Publish Images For Spark $sparkMajorVersion") {
            node('docker') {
                ws("${env.WORKSPACE}-spark-${sparkMajorVersion}") {
                    cleanWs()
                    checkout scm
                    def commons = load 'ci/commons.groovy'
                    commons.withSparklingWaterDockerImage {
                        sh "sudo apt -y install docker.io"
                        sh "sudo service docker start"
                        sh "sudo chmod 666 /var/run/docker.sock"
                        def sparklingVersion = getSparklingVersion(sparkMajorVersion)
                        sh "./gradlew dist -Pspark=$sparkMajorVersion"
                        def customEnv = [
                                "SPARK_HOME=/home/jenkins/spark-${getSparkVersion(sparkMajorVersion)}-bin-hadoop2.7",
                        ]
                        withEnv(customEnv) {
                            dir("./dist/build/zip/sparkling-water-${sparklingVersion}") {
                                sh """
                                    ./bin/build-kubernetes-images.sh scala
                                    ./bin/build-kubernetes-images.sh python
                                    ./bin/build-kubernetes-images.sh r
                                   """
                            }
                        }

                        def repoUrl = "${env.DOCKER_REGISTRY_ID}.dkr.ecr.us-east-2.amazonaws.com"
                        docker.withRegistry("https://${repoUrl}", 'ecr:us-east-2:SW_FULL_AWS_CREDS') {
                            sh """
                            docker tag sparkling-water-r:${sparklingVersion} $repoUrl/sw_kubernetes_repo/sparkling-water:r-${sparklingVersion}
                            docker tag sparkling-water-python:${sparklingVersion} $repoUrl/sw_kubernetes_repo/sparkling-water:python-${sparklingVersion}
                            docker tag sparkling-water-scala:${sparklingVersion} $repoUrl/sw_kubernetes_repo/sparkling-water:scala-${sparklingVersion}
                            docker push $repoUrl/sw_kubernetes_repo/sparkling-water:r-${sparklingVersion}
                            docker push $repoUrl/sw_kubernetes_repo/sparkling-water:python-${sparklingVersion}
                            docker push $repoUrl/sw_kubernetes_repo/sparkling-water:scala-${sparklingVersion}
                            """
                        }
                    }
                    cleanWs()
                }
            }
        }
    }
}

def getBuildAndPublishStages() {
    def parallelStages = [:]
    getKubernetesSparkVersions().each { sparkMajorVersion ->
        parallelStages["Build & Publish Spark ${sparkMajorVersion}"] = getBuildAndPublishStage(sparkMajorVersion)
    }
    return parallelStages
}

node("docker") {
    cleanWs()
    checkout scm
    def commons = load 'ci/commons.groovy'

    environment {
        DOCKER_REGISTRY_ID = ''
    }
/*    stage("Start EKS & ECR") {
        commons.withAWSCredentials {
            dir("kubernetes/src/terraform/aws") {
                def code = {
                    commons.terraformApply()
                    env.DOCKER_REGISTRY_ID = sh(
                            script: "terraform output docker_registry_id",
                            returnStdout: true
                    ).trim()
                }
                commons.withDocker("hashicorp/terraform:0.12.25", code, "--entrypoint='' --network host")
            }
        }
    }*/

    parallel(getBuildAndPublishStages())

    stage("Stop EKS & ECR") {
        dir("kubernetes/src/terraform/aws") {
            def code = {
                commons.terraformDestroy()
            }
            commons.withDocker("hashicorp/terraform:0.12.25", code, "--entrypoint='' --network host")
        }
    }
}
