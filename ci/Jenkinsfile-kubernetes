#!/usr/bin/groovy
@Library('test-shared-library') _

properties(
        [
                pipelineTriggers([cron('H 16 * * *')]),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)

def readPropertiesFile(file) {
    def properties = [:]
    readFile(file).split("\n").each { line ->
        if (!line.startsWith("#")) {
            def splits = line.split("=")
            properties[splits[0]] = splits[1]
        }
    }
    return properties
}

def getKubernetesSparkVersions(props) {
    def sparkVersions = props["supportedSparkVersions"].split(" ").toList()
    def boundaryVersion = props["kubernetesSupportSinceSpark"]
    def list = new ArrayList<String>()
    list.addAll(sparkVersions.subList(sparkVersions.indexOf(boundaryVersion), sparkVersions.size()))
    return list
}

def getSparklingVersion(props, sparkMajorVersion) {
    return "${props['version'].replace("-SNAPSHOT", "")}-${sparkMajorVersion}"
}

String getSparkVersion(sparkMajorVersion) {
    def versionLine = readFile("gradle-spark${sparkMajorVersion}.properties").split("\n").find() { line -> line.startsWith('sparkVersion') }
    return versionLine.split("=")[1]
}

def buildAndPublishSparklingWaterImage(String type, String sparklingVersion, String repoUrl) {
    sh """
        ./bin/build-kubernetes-images.sh $type
        docker tag sparkling-water-$type:${sparklingVersion} $repoUrl/sw_kubernetes_repo/sparkling-water:$type-${sparklingVersion}
        docker push $repoUrl/sw_kubernetes_repo/sparkling-water:$type-${sparklingVersion}
        docker rmi sparkling-water-$type:${sparklingVersion}
        docker rmi $repoUrl/sw_kubernetes_repo/sparkling-water:$type-${sparklingVersion}
        """
}

def getBuildAndPublishStage(props, sparkMajorVersion) {
    return {
        stage("Build & Publish Images For Spark $sparkMajorVersion") {
            node('docker') {
                ws("${env.WORKSPACE}-spark-${sparkMajorVersion}") {
                    cleanWs()
                    checkout scm
                    def commons = load 'ci/commons.groovy'
                    commons.withSparklingWaterDockerImage {
                        sh "sudo apt -y install docker.io"
                        sh "sudo service docker start"
                        sh "sudo chmod 666 /var/run/docker.sock"
                        def sparklingVersion = getSparklingVersion(props, sparkMajorVersion)
                        def sparkVersion = getSparkVersion(sparkMajorVersion)
                        sh "./gradlew dist -Pspark=$sparkMajorVersion"
                        def customEnv = [
                                "SPARK_HOME=/home/jenkins/spark-${sparkVersion}-bin-hadoop2.7",
                        ]
                        unstash "properties"
                        def repoId = readPropertiesFile("properties")["docker_registry_id"]
                        def repoUrl = "${repoId}.dkr.ecr.us-east-2.amazonaws.com"
                        docker.withRegistry("https://${repoUrl}", 'ecr:us-east-2:SW_FULL_AWS_CREDS') {
                            withEnv(customEnv) {
                                dir("./dist/build/zip/sparkling-water-${sparklingVersion}") {
                                    buildAndPublishSparklingWaterImage("scala", sparklingVersion, repoUrl)
                                    buildAndPublishSparklingWaterImage("python", sparklingVersion, repoUrl)
                                    buildAndPublishSparklingWaterImage("r", sparklingVersion, repoUrl)
                                    sh """
                                        docker rmi spark-r:${sparkVersion}
                                        docker rmi spark-py:${sparkVersion}
                                        docker rmi spark:${sparkVersion}
                                       """
                                    buildAndPublishSparklingWaterImage("external-backend", sparklingVersion, repoUrl)

                                }
                            }
                        }
                    }
                    cleanWs()
                }
            }
        }
    }
}

def getBuildAndPublishStages(props) {
    def parallelStages = [:]
    getKubernetesSparkVersions(props).each { sparkMajorVersion ->
        parallelStages["Build & Publish Spark ${sparkMajorVersion}"] = getBuildAndPublishStage(props, sparkMajorVersion)
    }
    return parallelStages
}

def withTestEnv(commons, image, code) {
    def dockerCode = {
        commons.withAWSCredentials {
            unstash "properties"
            sh """
                apt-get update && apt-get install -y apt-transport-https gnupg2 curl unzip procps
                curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
                echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
                apt-get update
                apt-get install -y kubectl
                kubectl version --client
                rm -rf awscliv2 && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip -d awscliv2
                ./awscliv2/aws/install -i /usr/local/aws-cli -b /usr/local/bin
                aws eks --region us-east-2 update-kubeconfig --name ${readPropertiesFile("properties")["cluster_name"]}
                kubectl get svc
                kubectl delete clusterrolebinding default --ignore-not-found
                kubectl create clusterrolebinding default --clusterrole=edit --serviceaccount=default:default --namespace=default
                """
                code()
        }
    }
    def repoId = readPropertiesFile("properties")["docker_registry_id"]
    docker.withRegistry("https://${repoId}.dkr.ecr.us-east-2.amazonaws.com", 'ecr:us-east-2:SW_FULL_AWS_CREDS') {
        commons.withDocker(image, dockerCode, "-u 0:0")
    }
}

def testScalaInternalBackendClusterMode(registryId, master, version) {
    sh "kubectl delete pod driver-scala --ignore-not-found"
    sh """
        \$SPARK_HOME/bin/spark-submit \
         --conf spark.kubernetes.container.image=${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:scala-${version} \
         --conf spark.kubernetes.driver.pod.name=driver-scala \
         --conf spark.scheduler.minRegisteredResourcesRatio=1 \
         --master $master \
         --deploy-mode cluster \
         --name test \
         --class ai.h2o.sparkling.InitTest \
         --conf spark.executor.instances=3 \
         local:///opt/sparkling-water/tests/initTest.jar
        """
    sh "kubectl get pod driver-scala | grep -q Completed && echo \"OK\" || exit 1"
}

def testPythonInternalBackendClusterMode(registryId, master, version) {
    sh "kubectl delete pod driver-python --ignore-not-found"
    sh """
        \$SPARK_HOME/bin/spark-submit \
         --conf spark.kubernetes.container.image=${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:python-${version} \
         --conf spark.kubernetes.driver.pod.name=driver-python \
         --conf spark.scheduler.minRegisteredResourcesRatio=1 \
         --master $master \
         --deploy-mode cluster \
         --name test \
         --conf spark.executor.instances=3 \
         local:///opt/sparkling-water/tests/initTest.py
        """
    sh "kubectl get pod driver-python | grep -q Completed && echo \"OK\" || exit 1"
}

def testRInternalBackend(registryId, master, version) {
    sh "kubectl delete pod driver-r --ignore-not-found"
    sh """
            export KUBERNETES_MASTER=$master
            export REGISTRY_ID=$registryId
            export SW_VERSION=$version
            Rscript --default-packages=methods,utils /opt/sparkling-water/tests/initTest.R
            """
        sh 'sleep 60'
        sh "kubectl get pod driver-r | grep -q Completed && echo \"OK\" || exit 1"
}

def installSparkHeadlessService() {
    sh """
kubectl delete service sparkling-water-app --ignore-not-found
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: sparkling-water-app
spec:
  clusterIP: "None"
  selector:
    spark-driver-selector: sparkling-water-app
EOF
        """
}

def testScalaInternalBackendClientMode(registryId, master, version) {
    sh "kubectl delete pod sparkling-water-app --ignore-not-found"
    installSparkHeadlessService()
    def image = "${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:scala-${version}"
    sh """
        kubectl run -n default -i --tty sparkling-water-app --restart=Never --labels spark-driver-selector=sparkling-water-app \
        --image=${image} -- \
        \$SPARK_HOME/bin/spark-submit \
         --conf spark.scheduler.minRegisteredResourcesRatio=1 \
         --conf spark.kubernetes.container.image=${image}  \
         --master $master \
         --class ai.h2o.sparkling.InitTest \
         --conf spark.driver.host=sparkling-water-app \
         --deploy-mode client \
         --conf spark.executor.instances=3 \
         local:///opt/sparkling-water/tests/initTest.jar
        """
    sh "kubectl get pod sparkling-water-app | grep -q Completed && echo \"OK\" || exit 1"
}

def testPythonInternalBackendClientMode(registryId, master, version) {
    sh "kubectl delete pod sparkling-water-app --ignore-not-found"
    installSparkHeadlessService()
    def image = "${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:python-${version}"
    sh """
        kubectl run -n default -i --tty sparkling-water-app --restart=Never --labels spark-driver-selector=sparkling-water-app \
        --image=${image} -- \
        \$SPARK_HOME/bin/spark-submit \
         --conf spark.scheduler.minRegisteredResourcesRatio=1 \
         --conf spark.kubernetes.container.image=${image}  \
         --master $master \
         --conf spark.driver.host=sparkling-water-app \
         --deploy-mode client \
         --conf spark.executor.instances=3 \
         local:///opt/sparkling-water/tests/initTest.py
        """
    sh "kubectl get pod sparkling-water-app | grep -q Completed && echo \"OK\" || exit 1"
}

def installH2OHeadlessService() {
    sh "kubectl delete service h2o-service --ignore-not-found"
    sh """
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: h2o-service
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: h2o-k8s
  ports:
  - protocol: TCP
    port: 54321
EOF
    """
}

def startExternalH2OBackend(registryId, version) {
    installH2OHeadlessService()
    sh "kubectl delete statefulsets h2o-stateful-set --ignore-not-found"
    sh """
cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: h2o-stateful-set
  namespace: default
spec:
  serviceName: h2o-service
  replicas: 2
  selector:
    matchLabels:
      app: h2o-k8s
  template:
    metadata:
      labels:
        app: h2o-k8s
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: h2o-k8s
          image: '${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:external-backend-${version}'
          resources:
            requests:
              memory: "2Gi"
          ports:
            - containerPort: 54321
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /kubernetes/isLeaderNode
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 1
          env:
          - name: H2O_KUBERNETES_SERVICE_DNS
            value: h2o-service.default.svc.cluster.local
          - name: H2O_NODE_LOOKUP_TIMEOUT
            value: '180'
          - name: H2O_NODE_EXPECTED_COUNT
            value: '2'
          - name: H2O_KUBERNETES_API_PORT
            value: '8081'
EOF
    """
    sh 'sleep 60'
    return sh(
            script: "kubectl get endpoints h2o-service -o jsonpath='{.subsets[0].addresses[0].ip}'",
            returnStdout: true
    ).trim() + ":54321"
}

def stopExternalH2OBackend() {
    sh "kubectl delete statefulsets h2o-stateful-set --ignore-not-found"
}

def testRExternalBackend(registryId, master, version) {
    def leaderNodeIpPort = startExternalH2OBackend(registryId, version)
    //TODO
    stopExternalH2OBackend()
}

def testScalaExternalBackendClusterMode(registryId, master, version) {
    def leaderNodeIpPort = startExternalH2OBackend(registryId, version)
    //TODO
    stopExternalH2OBackend()
}

def testScalaExternalBackendClientMode(registryId, master, version) {
    def leaderNodeIpPort = startExternalH2OBackend(registryId, version)
    //TODO
    stopExternalH2OBackend()
}

def testPythonExternalBackendClusterMode(registryId, master, version) {
    def leaderNodeIpPort = startExternalH2OBackend(registryId, version)
    //TODO
    stopExternalH2OBackend()
}

def testPythonExternalBackendClientMode(registryId, master, version) {
    def leaderNodeIpPort = startExternalH2OBackend(registryId, version)
    //TODO
    stopExternalH2OBackend()
}

node("docker") {
    cleanWs()
    checkout scm
    def commons = load 'ci/commons.groovy'
    def props = readPropertiesFile("gradle.properties")
    def sparklingVersion = props['version'].replace("-SNAPSHOT", "")
    
    stage("Start EKS & ECR") {
        commons.withAWSCredentials {
            dir("kubernetes/src/terraform/aws") {
                def code = {
                    commons.terraformApply()
                    def values = commons.extractTerraformOutputs(["docker_registry_id", "cluster_name", "cluster_endpoint"])
                    def valuesAsString = values.collect { "${it.key}=${it.value}" }.join("\n") + "\n" + "version=$sparklingVersion" + "\n"
                    writeFile file: "properties", text: valuesAsString
                    stash name: "properties", includes: "properties"
                    arch "terraform.tfstate"
                }
                commons.withDocker("hashicorp/terraform:0.12.25", code, "--entrypoint='' --network host")
            }
        }
    }

    parallel(getBuildAndPublishStages(props))

    getKubernetesSparkVersions(props).each { sparkMajorVersion ->
        stage("Test Scala internal backend, Spark ${sparkMajorVersion}") {
            unstash "properties"
            def registryId = readPropertiesFile("properties")["docker_registry_id"]
            def version = readPropertiesFile("properties")["version"] + "-${sparkMajorVersion}"
            def master = "k8s://" + readPropertiesFile("properties")["cluster_endpoint"]
            def image = "${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:scala-${version}"
            withTestEnv(commons, image) {
                testScalaInternalBackendClusterMode(registryId, master, version)
                testScalaInternalBackendClientMode(registryId, master, version)
                testScalaExternalBackendClusterMode(registryId, master, version)
                testScalaExternalBackendClientMode(registryId, master, version)
            }
        }

        stage("Test Python internal backend, Spark ${sparkMajorVersion}") {
            unstash "properties"
            def registryId = readPropertiesFile("properties")["docker_registry_id"]
            def version = readPropertiesFile("properties")["version"] + "-${sparkMajorVersion}"
            def master = "k8s://" + readPropertiesFile("properties")["cluster_endpoint"]
            def image = "${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:python-${version}"
            withTestEnv(commons, image) {
                testPythonInternalBackendClusterMode(registryId, master, version)
                testPythonInternalBackendClientMode(registryId, master, version)
                testPythonExternalBackendClusterMode(registryId, master, version)
                testPythonExternalBackendClientMode(registryId, master, version)
            }
        }

        stage("Test R internal backend, Spark ${sparkMajorVersion}") {
            unstash "properties"
            def registryId = readPropertiesFile("properties")["docker_registry_id"]
            def version = readPropertiesFile("properties")["version"] + "-${sparkMajorVersion}"
            def master = "k8s://" + readPropertiesFile("properties")["cluster_endpoint"]
            def image = "${registryId}.dkr.ecr.us-east-2.amazonaws.com/sw_kubernetes_repo/sparkling-water:r-${version}"
            withTestEnv(commons, image) {
                // R sets deployment mode automatically
                testRInternalBackend(registryId, master, version)
                testRExternalBackend(registryId, master, version)
            }
        }
    }

    stage("Stop EKS & ECR") {
        commons.withAWSCredentials {
            dir("kubernetes/src/terraform/aws") {
                def code = {
                    commons.terraformDestroy()
                }
                commons.withDocker("hashicorp/terraform:0.12.25", code, "--entrypoint='' --network host")
            }
        }
    }
}
