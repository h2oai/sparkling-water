#!/usr/bin/groovy
import com.cloudbees.plugins.credentials.*

@Library('test-shared-library') _

node("mr-0xc10") {
    cleanWs()
    checkout scm
    def commons = load 'ci/commons.groovy'

    stage("Deploy Testing Infrastructure on AWS") {
        commons.withAWSCredentials {
            commons.withTerraform {
                commons.withJenkinsCredentials {
                    commons.withGitPullCredentials {
                        commons.withDAICredentials {
                            commons.withGitPushCredentials {
                                commons.withSigningCredentials {
                                    dir("ci/aws/terraform") {
                                        def publicHostname = "sparkling-jenkins2.h2o.ai"
                                        def initCredentialsFile = "modules/jenkins/scripts/init-credentials.groovy"
                                        writeFile file: initCredentialsFile, text: readFile(initCredentialsFile)
                                                .replaceAll("SUBST_GITHUB_PULL_USER", env.GITHUB_PULL_USER)
                                                .replaceAll("SUBST_GITHUB_PULL_PASS", env.GITHUB_PULL_PASS)
                                                .replaceAll("SUBST_GITHUB_TOKEN", env.GITHUB_TOKEN)
                                                .replaceAll("SUBST_SIGN_KEY", env.SIGN_KEY)
                                                .replaceAll("SUBST_DAI_LICENSE_KEY", env.DRIVERLESS_AI_LICENSE_KEY)

                                        def initSecurityFile = "modules/jenkins/scripts/init-security.groovy"
                                        writeFile file: initSecurityFile, text: readFile(initCredentialsFile)
                                                .replaceAll("SUBST_PUBLIC_HOSTNAME", publicHostname)
                                                .replaceAll("SUBST_JENKINS_USER", env.SW_JENKINS_USER)
                                                .replaceAll("SUBST_JENKINS_PASS", env.SW_JENKINS_PASS)

                                        def initSSLFile = "modules/jenkins/scripts/init-ssl.sh"
                                        writeFile file: initSSLFile, text: readFile(initSSLFile)
                                                .replaceAll("SUBST_PUBLIC_HOSTNAME", publicHostname)

                                        commons.terraformApply("-var signing_file=${env.RING_FILE_PATH}")
                                        def values = commons.extractTerraformOutputs(["docker_registry_id", "jenkins_url"])
                                        def valuesAsString = values.collect { "${it.key}=${it.value}" }.join("\n") + "\n"
                                        writeFile file: "infra.properties", text: valuesAsString
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    stage("Save Infrastructure State") {
        commons.withGitPushCredentials {
            commons.gitCommit(["ci/aws/terraform/terraform.tfstate", "ci/aws/terraform/infra.properties"], "Saving Infrastructure State")
        }
    }
}
