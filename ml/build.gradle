description = "Sparkling Water ML Pipelines"

apply from: "$rootDir/gradle/sparkTest.gradle"
apply from: "$rootDir/gradle/utils.gradle"

sourceSets {
  main {
    scala {
      srcDirs += 'src-gen/main/scala'
    }
  }
}

spotless {
  scala {
    target project.fileTree(project.rootDir) {
      include 'ml/src/**/*.scala'
      exclude "ml/src-gen/main/**/*.scala"
    }
  }
}

dependencies {
  api(project(":sparkling-water-core")) { exclude group: "javax.servlet", module: "servlet-api" }
  api(project(":sparkling-water-scoring"))
  api("ai.h2o:h2o-ext-target-encoder:${h2oVersion}")
  api("ai.h2o:mojo2-runtime-api:${mojoPipelineVersion}")
  api("ai.h2o:mojo2-runtime-impl:${mojoPipelineVersion}")
  implementation(project(':sparkling-water-api-generation'))

  compileOnly(project(":sparkling-water-macros"))
  compileOnly("org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}")
  compileOnly("org.scala-lang:scala-library:${scalaVersion}")

  testImplementation(project(":sparkling-water-macros"))
  testImplementation("org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}")
  testImplementation("ai.h2o:h2o-ext-target-encoder:${h2oVersion}")
  testImplementation("org.apache.spark:spark-repl_${scalaBaseVersion}:${sparkVersion}")
  testImplementation("ai.h2o:mojo2-runtime-api:${mojoPipelineVersion}")
  testImplementation("ai.h2o:mojo2-runtime-impl:${mojoPipelineVersion}")
  testImplementation("org.scalatest:scalatest_${scalaBaseVersion}:${scalaTestVersion}")
  testImplementation("junit:junit:4.11")
  testImplementation(project(path: ':sparkling-water-core', configuration: 'testArchives'))
}

test {
  if (project.property("testMojoPipeline") != "true") {
    exclude 'ai/h2o/sparkling/ml/models/H2OMOJOPipelineModelTest.class'
  }
}

task cleanGeneratedApi(type: Delete) {
  delete "$projectDir/src-gen"
}

task generateApi(type: JavaExec, dependsOn: [cleanGeneratedApi, ':sparkling-water-api-generation:build']) {
  group = "Execution"
  classpath = sourceSets.main.compileClasspath
  main = "ai.h2o.sparkling.api.generation.AlgorithmAPIRunner"
  args = ["scala", "$projectDir/src-gen/main/scala"]
  standardOutput = System.out
  errorOutput = System.err
}

compileScala.dependsOn(generateApi)
clean.dependsOn(cleanGeneratedApi)

defineStandardPublication().call()
