import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import groovy.json.JsonSlurper

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'base'

description = """
h2o and h2o Driver Assembly. This assembly extends provided jar by sparkling-water specific classes needed in external
backend mode.

User can specify location to either h2o or h2odriver jar via H2O_ORIGINAL_JAR env variable.
No works is done if H2O_ORIGINAL_JAR is not set.

User can also use gradle command line argument -PdownloadH2O which will download correct h2o version for current
sparkling water from our repository if it hasn't been already downloaded.
If this is run without any argument, then basic h2o jar is downloaded,
but this command takes also argument specifying hadoop version, such as cdh5.4. In case the argument is specified, instead
of downloading h2o jar this command will download h2o driver jar for specified hadoop version.

Gradle property has higher priority if both H2O_ORIGINAL_JAR and -PdownloadH2O are set

Few examples:

1)
export H2O_ORIGINAL_JAR=...
./gradlew -PdoExtend extendJar

In this case the jar to be extended is located using the provided environment variable

2)
./gradlew -PdoExtend extendJar -PdownloadH2O

In this case the jar to be extended is h2o jar and is downloaded from our repository first

3)
./gradlew -PdoExtend extendJar -PdownloadH2O=cdh5.4

In this case the jar to be extended is h2o driver jar for provided hadoop version and is downloaded from our repository first

4)
./gradlew -PdoExtend extendJar -PdownloadH2O=abc

This case will throw an exception since such hadoop version is not supported

5)
export H2O_ORIGINAL_JAR = ...
./gradlew extendJar -PdoExtend -PdownloadH2O

This version will ignore environment variable and jar to be extended will be downloaded from our repository. The same
holds for the version with argument.

The extendJar tasks also print the path to the extend jar. It can be saved to environmental variable as
export H2O_EXTENDED_JAR=`./gradlew -q -PdoExtend extendJar -PdownloadH2O`
"""

if(project.hasProperty("doExtend")) {

    configurations {
        artifactsToMerge
    }

    dependencies {
        artifactsToMerge("ai.h2o:h2o-scala_${scalaBaseVersion}:${h2oVersion}") {
            transitive = false
        }
        artifactsToMerge("org.scala-lang:scala-library:${scalaVersion}")
        artifactsToMerge(project(":sparkling-water-ml")) {
            transitive = false
        }
        artifactsToMerge(project(":sparkling-water-core")) {
            exclude group: "org.joda", module: "joda-convert:1.7"
            transitive = false
        }
        artifactsToMerge("org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}") {
            exclude group: "org.apache.spark", module: "spark-core_${scalaBaseVersion}"
            exclude group: "org.apache.spark", module: "spark-streaming_${scalaBaseVersion}"
            exclude group: "org.apache.spark", module: "spark-sql_${scalaBaseVersion}"
            exclude group: "org.apache.spark", module: "spark-graphx_${scalaBaseVersion}"
            exclude group: "org.jpmml", module: "pmml-model"
            exclude group: "org.apache.commons", module: "commons-math3"
            exclude group: "org.apache.spark", module: " spark-mllib-local_${scalaBaseVersion}"
            exclude group: "org.apache.spark", module: "spark-tags_${scalaBaseVersion}"
            exclude group: "org.spire-math", module: "spire_${scalaBaseVersion}"
        }

        artifactsToMerge("joda-time:joda-time:2.3")
        artifactsToMerge(project(':sparkling-water-examples')) {
            transitive = false
        }

        artifactsToMerge files(getOrDownloadOriginalJar())
    }

    task printExtendedJarLocation() {
        doLast {
            def fileName = getH2OJarName(getOrDownloadOriginalJar())
            println(file("private/extended/${fileName}.jar"))
        }
    }


    task extendJar(type: ShadowJar, dependsOn: [":sparkling-water-examples:jar",
                                                ":sparkling-water-ml:jar",
                                                ":sparkling-water-core:jar"]) {
        if (archivePath.exists()) archivePath.delete()
        exclude("META-INF/LICENSE")
        zip64 = true
        destinationDir = file("private/extended")
        destinationDir.mkdirs()
        mergeServiceFiles()
        def fileName = getH2OJarName(getOrDownloadOriginalJar())
        manifest {
            attributes 'Main-Class': getJarMainClass(getOrDownloadOriginalJar())
        }
        configurations = [project.configurations.artifactsToMerge]
        baseName = fileName
        classifier = null
        version = null

        finalizedBy "printExtendedJarLocation"
    }

    task cleanH2OJars(type: Delete) {
        delete(file("private/downloaded"))
    }

    task cleanExtendedH2OJars(type: Delete) {
        delete(file("private/extended"))
    }
}

task printHadoopDistributions() {
    doLast {
        println(getSupportedHadoopDistributions(h2oMajorName, h2oBuild))
    }
}

/**
 * Method determining whether the h2o or h2o driver jar is available.
 * Location to the jar is returned if it's available, otherwise null is returned
 *
 * If the user specified Gradle argument downloadH2O then the method will try do download the jar and return path to it
 */
String getOrDownloadOriginalJar() {
    if (project.hasProperty("downloadH2O")) {
        def saveDir = file("private/downloaded")
        saveDir.mkdirs()
        def relName = h2oMajorName != "master" ? "rel-${h2oMajorName}" : "master"
        def hadoopVersion = project.downloadH2O
        if (hadoopVersion == null || hadoopVersion.isEmpty()) {
            def url = "https://s3.amazonaws.com/h2o-release/h2o/${relName}/${h2oBuild}/Rjar/h2o.jar".toURL()
            def h2oJarFile = new File(saveDir, "h2odriver-${h2oMajorVersion}.${h2oBuild}.jar")
            if (!h2oJarFile.exists()) {
                logger.info("Downloading h2o jar from: $url")
                downloadFile(url, h2oJarFile)
            }
            return h2oJarFile.absolutePath
        } else {
            def url = "https://s3.amazonaws.com/h2o-release/h2o/${relName}/${h2oBuild}/h2o-${h2oMajorVersion}.${h2oBuild}-${hadoopVersion}.zip".toURL()

            def h2oJarFile = new File(saveDir, "h2odriver-${h2oMajorVersion}.${h2oBuild}-${hadoopVersion}.jar")
            if (!h2oJarFile.exists()) {
                def zipEntryName = "h2o-${h2oMajorVersion}.${h2oBuild}-${hadoopVersion}/h2odriver.jar"

                def distributions = getSupportedHadoopDistributions(h2oMajorName, h2oBuild)
                if (!distributions.contains(hadoopVersion)) {
                    throw new IOException("""
The hadoop version you have specified is $hadoopVersion, however supported hadoop versions are $distributions
""")
                }
                logger.info("Downloading h2o driver for hadoop version: $hadoopVersion from: $url")
                downloadFileFromZip(url, h2oJarFile, zipEntryName)

            }
            return h2oJarFile.absolutePath
        }
    } else {
        def originalJar = System.getenv("H2O_ORIGINAL_JAR")
        if (originalJar != null && !originalJar.isEmpty()) {
            logger.info("\"H2O_ORIGINAL_JAR\" property set to $originalJar")
            return originalJar
        } else {
            throw new RuntimeException("Either -PdownloadH2O option or H2O_ORIGINAL_JAR environmental property needs to be specified")
        }
    }
}


static String getH2OJarName(String pathToH2OJar) {
    def fileName = Paths.get(pathToH2OJar).last().toString()
    def fileNameNoExtension = fileName.substring(0, fileName.length() - 4)
    return fileNameNoExtension + "-extended"
}

static String getJarMainClass(String pathToH2OJar) {
    return isJarH2ODriver(pathToH2OJar) ? 'water.hadoop.h2odriver' : 'water.H2OApp'
}

/**
 * Check if the jar on the path is regular h2o jar or h2o driver jar
 * @param pathToH2OJar path to the jar to be checked
 * @return true if it is h2o driver jar, false otherwise
 */
static boolean isJarH2ODriver(String pathToH2OJar) {
    def jarFile = Paths.get(pathToH2OJar)
    def fs = FileSystems.newFileSystem(jarFile, null)
    def driverClass = fs.getPath("water/hadoop/h2odriver.class")
    return Files.exists(driverClass)
}

/**
 * Return list of Hadoop distributions for this Sparkling Water
 */
def static getSupportedHadoopDistributions(h2oMajorName, h2oBuild) {
    def relName = h2oMajorName != "master" ? "rel-${h2oMajorName}" : "master"

    def buildInfo = "https://s3.amazonaws.com/h2o-release/h2o/${relName}/${h2oBuild}/buildinfo.json".toURL().text
    def jsonResp = new JsonSlurper().parseText(buildInfo)
    // we need to ensure that the distribution names does not contain minor versions
    def distributions = jsonResp.hadoop_distributions.collect { it.distribution }
    return distributions.join(" ")
}

/**
 * This method expects URL pointing to a zip file and it will save on disk only a file from that zip
 * with the specified name
 * @param fromZip url pointing to a zip file
 * @param to file to which we store the data
 * @param fullFileName file name in zip file we want to download
 * @return path to the downloaded file
 */
def static downloadFileFromZip(URL fromZip, File to, String fullFileName) {
    fromZip.withInputStream { is ->
        ZipInputStream zin = new ZipInputStream(is)
        ZipEntry ze = zin.getNextEntry()
        // read the files before we hit the one we are interested in
        while (ze.getName() != fullFileName) {
            zin.closeEntry()
            ze = zin.getNextEntry()
        }
        saveFile(zin, to)
        zin.closeEntry()
    }
    return to.absolutePath
}

/**
 * Download a file from the provided URL into target file and return path to the downloaded file
 * @param from url from which download the data
 * @param to target file
 * @return path to the downloaded file
 */
def static downloadFile(URL from, File to) {
    from.withInputStream { is ->
        saveFile(is, to)
    }
    return to.absolutePath
}

/**
 * Save data in provided input stream to the specified file
 * @param is input stream with data
 * @param to file to which store the data
 * @return path to the file
 */
def static saveFile(InputStream is, File to) {
    to.withOutputStream { os ->
        def bs = new BufferedOutputStream(os)
        bs << is
    }
    return to.absolutePath
}

