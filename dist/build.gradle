apply plugin: 'base'
apply from: "$rootDir/gradle/utils.gradle"

ext {
    distDir = file("$buildDir/dist")
    zipDir = file("$buildDir/zip/sparkling-water-${version}")
}

def substituteBuildInfoFile(buildTimeMillis, buildTimeIso8601, buildTimeLocal) {
    def content = file("src/buildinfo.json").getText('UTF-8')
            .replaceAll("SUBST_BUILD_TIME_MILLIS", buildTimeMillis)
            .replaceAll("SUBST_BUILD_TIME_ISO8601", buildTimeIso8601)
            .replaceAll("SUBST_BUILD_TIME_LOCAL", buildTimeLocal)
            .replaceAll("SUBST_PROJECT_VERSION", version.toString())
            .replaceAll("SUBST_LAST_COMMIT_HASH", getGitHash())
            .replaceAll("SUBST_H2O_NAME", h2oMajorName)
            .replaceAll("SUBST_H2O_VERSION", h2oMajorVersion)
            .replaceAll("SUBST_H2O_PROJECT_VERSION", h2oVersion)
            .replaceAll("SUBST_H2O_BRANCH_NAME", getH2OBranch(h2oMajorName))
            .replaceAll("SUBST_H2O_BUILD_NUMBER", h2oBuild)
            .replaceAll("SUBST_SPARK_VERSION", sparkVersion)

    def buildInfoFile = file("$distDir/buildinfo.json")
    buildInfoFile.createNewFile()
    buildInfoFile.write(content, 'UTF-8')
}

def getPatchVersionNumber() {
    def patchVersion = version.toString().split("\\.")[2]

    if (version.contains("SNAPSHOT-")) {
        return patchVersion.split("-")[2]
    } else {
        return patchVersion
    }
}

def getS3Bucket() {
    def prefix = "sparkling-water/${getGitBranch().replaceAll("/", "-")}-${spark}"
    def suffix = getPatchVersionNumber()

    if (version.contains("SNAPSHOT-")) {
        return "${prefix}/nightly/${suffix}"
    } else {
        return "${prefix}/${suffix}"
    }
}

def getMavenRepoLink() {
    return "https://h2o-release.s3.amazonaws.com/${getS3Bucket()}/maven/repo/"
}

def getMavenRepoHtml() {
    if (version.contains("SNAPSHOT")) {
        return """
                &nbsp;maven {</br>
                &nbsp;&nbsp;url "${getMavenRepoLink()}"</br>
                &nbsp;}</br>
              """
    } else {
        return "&nbsp;mavenCentral()</br>"
    }
}

def getExtraSparkRepo() {
    if (version.contains("SNAPSHOT")) {
        return "--repositories ${getMavenRepoLink()}"
    } else {
        return ""
    }
}

def substituteIndexHtml(buildTimeLocal) {

    def sparkMajorWithExclude = "${sparkMajorVersion}.*"
    sparkMajorWithExclude = unsupportedMinorSparkVersions.isEmpty() ? "${sparkMajorWithExclude}" : "${sparkMajorWithExclude} except ${unsupportedMinorSparkVersions}"
    def content = file("src/index.html").getText('UTF-8')
            .replaceAll("SUBST_SPARK_MAJOR_VERSION_WITH_EXCLUDES", sparkMajorWithExclude)
            .replaceAll("SUBST_PROJECT_VERSION", version.toString())
            .replaceAll("SUBST_PROJECT_GITHASH", getGitHash())
            .replaceAll("SUBST_H2O_VERSION", h2oMajorVersion)
            .replaceAll("SUBST_H2O_BUILD", h2oBuild)
            .replaceAll("SUBST_H2O_NAME", h2oMajorName)
            .replaceAll("SUBST_H2O_DRIVERS_LIST", getSupportedHadoopDistributions(h2oMajorName, h2oBuild))
            .replaceAll("SUBST_SPARK_VERSION", sparkVersion)
            .replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkMajorVersion)
            .replaceAll("SUBST_H2O_BRANCH_NAME", getH2OBranch(h2oMajorName))
            .replaceAll("SUBST_SCALA_VERSION", scalaBaseVersion)
            .replaceAll("SUBST_BUILD_TIME_LOCAL", buildTimeLocal)
            .replaceAll("SUBST_MAVEN_REPO", getMavenRepoHtml())
            .replaceAll("SUBST_EXTRA_REPO", getExtraSparkRepo())
            .replaceAll("SUBST_S3_BUCKET", getS3Bucket())
    def indexHtmlFile = file("$distDir/index.html")
    indexHtmlFile.createNewFile()
    indexHtmlFile.write(content, 'UTF-8')
}

def copyRecursive(String fromSuffix, String where, String filterRegex = "**/*") {
    copy {
        from("$rootDir/$fromSuffix") {
            include filterRegex
        }
        into "$where"
    }
}

def copyAndKeepPath(String filePath, String targetDir) {
    copy {
        from("$rootDir/$filePath")
        into "$targetDir/${filePath.contains("/") ? filePath.substring(0, filePath.lastIndexOf('/')) : ""}"
    }
}

def copySingle(String sourceDir, String fileName, String targetDir) {
    copy {
        from("$rootDir/$sourceDir/$fileName")
        into "$targetDir"
    }
}

def createSupportedHadoopFile(String where) {
    def versions = "standalone ${getSupportedHadoopDistributions(h2oMajorName, h2oBuild)}"
    def versionsFile = file("$where/h2o_drivers.txt")
    versionsFile.createNewFile()
    versionsFile.write(versions, 'UTF-8')
}

def distTaskDependencies = [
        ":sparkling-water-doc:site",
        ":sparkling-water-r:distR",
        ":sparkling-water-assembly:shadowJar",
        ":sparkling-water-templates:build",
        ":sparkling-water-py:distPython",
        ":sparkling-water-r:createCranRepo",
        ":sparkling-water-core:publish",
        ":sparkling-water-doc:publish",
        ":sparkling-water-repl:publish",
        ":sparkling-water-ml:publish",
        ":sparkling-water-examples:publish",
        ":sparkling-water-package:publish"
]

def copyAndSubstituteGradleProperties() {
    def content = file("$rootDir/gradle.properties").getText('UTF-8')
    
    def sparkSpecificContent = file("$rootDir/gradle-spark${spark}.properties")
            .getText('UTF-8')
            .replaceAll("version=.*", "version=${version.toString()}")

    def gradlePropsFile = file("$zipDir/gradle.properties")
    gradlePropsFile.createNewFile()
    gradlePropsFile.write(content + sparkSpecificContent, 'UTF-8')
}

task copyFilesForZipDistribution {
    doLast {

        if (buildDir.exists()) {
            buildDir.deleteDir()
        }
        
        if (!zipDir.exists()){
            zipDir.mkdirs()
        }

        copySingle("r/build/", "rsparkling_${version.replace("-SNAPSHOT", "")}.tar.gz", "$zipDir")
        createSupportedHadoopFile("$zipDir")

        copyAndKeepPath("assembly/build/libs/sparkling-water-assembly_$scalaBaseVersion-${version}-all.jar", "$zipDir")
        copyAndKeepPath("py/build/dist/h2o_pysparkling_$sparkMajorVersion-${version}.zip", "$zipDir")
        copyAndKeepPath("examples/README.rst", "$zipDir")
        copyAndKeepPath("examples/scripts/chicagoCrimeSmall.script.scala", "$zipDir")
        copyAndKeepPath("examples/scripts/chicagoCrimeSmallShell.script.scala", "$zipDir")
        copyAndKeepPath("examples/scripts/hamOrSpam.script.scala", "$zipDir")
        copyAndKeepPath("examples/scripts/StrataAirlines.script.scala", "$zipDir")
        copyAndKeepPath("examples/scripts/craigslistJobTitles.script.scala", "$zipDir")
        copyAndKeepPath("examples/smalldata/airlines/allyears2k_headers.zip", "$zipDir")
        copyAndKeepPath("examples/smalldata/airlines/year2005.csv.gz", "$zipDir")
        copyAndKeepPath("examples/smalldata/chicago/Chicago_Ohare_International_Airport.csv", "$zipDir")
        copyAndKeepPath("examples/smalldata/chicago/chicagoAllWeather.csv", "$zipDir")
        copyAndKeepPath("examples/smalldata/chicago/chicagoCensus.csv", "$zipDir")
        copyAndKeepPath("examples/smalldata/chicago/chicagoCrimes10k.csv.zip", "$zipDir")
        copyAndKeepPath("examples/smalldata/iris/iris_wheader.csv", "$zipDir")
        copyAndKeepPath("examples/smalldata/prostate/prostate.csv", "$zipDir")
        copyAndKeepPath("examples/smalldata/smsData.txt", "$zipDir")
        copyAndKeepPath("examples/smalldata/craigslistJobTitles.csv", "$zipDir")
        copyAndKeepPath("examples/smalldata/bcwd.csv", "$zipDir")
        copyAndKeepPath("LICENSE", "$zipDir")
        copyAndKeepPath("README.rst", "$zipDir")
        copyAndSubstituteGradleProperties()
        
        copyRecursive("bin/", "$zipDir/bin")
        copyRecursive("examples/flows/", "$zipDir/examples/flows")
        copyRecursive("doc/build/site/", "$zipDir/doc/build/site")
        copyRecursive("docker/", "$zipDir/docker")
        copyRecursive("py/examples/", "$zipDir/py/examples/")
    }
}

task cleanRepo(type: Delete) {
    delete rootProject.buildDir
}

copyFilesForZipDistribution.mustRunAfter cleanRepo
copyFilesForZipDistribution.dependsOn(distTaskDependencies)

task zipDistribution(type: Zip, dependsOn: copyFilesForZipDistribution) {
    from "$buildDir/zip"
    archiveFileName = "sparkling-water-${version}.zip"
    destinationDirectory = file("$buildDir/dist")
}

task dist(dependsOn: zipDistribution) {
    doLast {
        def buildTimeMillis = System.currentTimeMillis().toString()
        def buildTimeIso8601 = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
        def buildTimeLocal = new Date().toString()

        // Prepare additional files which are accessible directly from the page
        copySingle("py/build/dist/", "h2o_pysparkling_$sparkMajorVersion-${version}.zip", "$distDir/py")
        copyRecursive("r/build/repo/", "$distDir/R")
        copyRecursive("core/build/docs/scaladoc/", "$distDir/scaladoc")
        copyRecursive("doc/build/site/", "$distDir/doc")
        copyRecursive("templates/build/", "$distDir/templates")
        copyRecursive("build/repo", "${distDir}/maven/repo")
        substituteBuildInfoFile(buildTimeMillis, buildTimeIso8601, buildTimeLocal)
        substituteIndexHtml(buildTimeLocal)
    }
}
