apply from: "$rootDir/gradle/utils.gradle"

description = "RSparkling - Sparkling-Water R Package"

dependencies {
    compile project(path: ':sparkling-water-assembly')
}

task distR(type: Exec) {

    doFirst {
        file(project.buildDir).mkdir()
        copy {
            from file("src")
            into new File(project.buildDir, "src")
        }
    }
    workingDir project.buildDir
    commandLine getOsSpecificCommandLine(['R', 'CMD', 'build', 'src'])
}

task buildR(dependsOn: distR)
build.dependsOn buildR

task cleanR(type: Delete) {
    delete getBuildDir()
}


task test(type: Exec, dependsOn: [configurations.compile]) {
    environment["spark.version"] = sparkVersion
    environment["sparkling.assembly.jar"] =  configurations.compile.find {it.name.endsWith("sparkling-water-assembly_${scalaBaseVersion}-${version}-all.jar")}.toString()
    environment["sparkling.water.version"] = version.toString()
    environment["NOT_CRAN"] = "true"
    environment["SPARK_HOME"] = sparkHome

    workingDir file("tests")
    commandLine getOsSpecificCommandLine(['R', '-f', 'testthat.R'])
}

task createReleaseIntegTable(type: Exec){
    workingDir projectDir
    commandLine getOsSpecificCommandLine(["./for_release/update_release_table.sh"])
}

task updateRReadme(dependsOn: createReleaseIntegTable){
    doLast {

        def (first, second, third) = version.replace("-SNAPSHOT", "").tokenize(".")
        def majorVersion = "${first}.${second}"
        def minorVersion = third
        def rsparklingReleaseTable = file("build/r_release_table.rst").getText('UTF-8')
        def contents = file("for_release/README_TEMPLATE.RST").getText('UTF-8')
        contents = contents
                .replaceAll("SUBST_SW_VERSION", version.replace("-SNAPSHOT", ""))
                .replaceAll("SUBST_SW_MAJOR_VERSION", majorVersion)
                .replaceAll("SUBST_SW_MINOR_VERSION", minorVersion)
                .replaceAll("SUBST_SPARK_VERSION", sparkVersion)
                .replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkVersion.count(".") == 1 ? sparkVersion : sparkVersion.substring(0, sparkVersion.lastIndexOf('.')))
                .replaceAll("SUBST_H2O_VERSION", h2oVersion)
                .replaceAll("SUBST_H2O_RELEASE_NAME", h2oMajorName)
                .replaceAll("SUBST_H2O_BUILD_NUMBER", h2oBuild)
                .replaceAll("SUBST_RSPARKLING_RELEASE_TABLE", rsparklingReleaseTable)

        file("README.rst").write(contents, 'UTF-8')

    }
}

task installH2ORPackage(type: Exec){
    commandLine getOsSpecificCommandLine(["R", "-e", "install.packages(\"h2o\", type = \"source\", repos = \"http://h2o-release.s3.amazonaws.com/h2o/rel-${h2oMajorName}/${h2oBuild}/R\")"])
}

task installRSparklingPackage(type: Exec, dependsOn: buildR){
    workingDir project.buildDir
    commandLine getOsSpecificCommandLine(["R", "-e", "install.packages(\"rsparkling_0.2.4.tar.gz\", type=\"source\", repos=NULL)"])
}

task generateSysData(type: Exec){
    workingDir projectDir
    commandLine getOsSpecificCommandLine(["./for_release/generate_release_table_sysdata.sh"])
}


task prepareForRSparklingRelease(dependsOn: [updateRReadme, generateSysData])

clean.dependsOn cleanR

check.dependsOn test