apply from: "$rootDir/gradle/utils.gradle"

description = "RSparkling - Sparkling-Water R Package"

configurations {
    sparklingWaterAssemblyJar
}

dependencies {
    sparklingWaterAssemblyJar project(path: ':sparkling-water-assembly', configuration: 'shadow')
}

ext {
    contribDir = file("${project.buildDir}/repo/src/contrib")
}

def copyRSetup() {
    file(project.buildDir).mkdir()
    copy {
        from file("src")
        into new File(project.buildDir, "src")

        filter {
            it.replaceAll("SUBST_SW_VERSION", version)
        }
    }

    // Copy sparkling water assembly jar
    def fatJar = configurations.sparklingWaterAssemblyJar.singleFile
    copy {
        from fatJar
        into file("${project.buildDir}/src/inst/java")
        rename ".*", "sparkling_water_assembly.jar"
    }
    createBuildInfoFile("${project.buildDir}/src/inst/")
}

def createBuildInfoFile(String basePath) {
    def f = file("${basePath}/buildinfo.txt")
    f.write("${h2oVersion}\n")
    f.append("${h2oMajorName}\n")
    f.append("${h2oBuild}\n")
    f.append("${version}")
}

task distR(type: Exec, dependsOn: configurations.sparklingWaterAssemblyJar) {
    doFirst {
        copyRSetup()
    }
    workingDir project.buildDir
    commandLine getOsSpecificCommandLine(['R', 'CMD', 'build', 'src'])
}

task cleanR(type: Delete) {
    delete getBuildDir()
}


task test(type: Exec, dependsOn: distR) {
    environment["spark.version"] = sparkVersion
    // ensure that nightly tests can be run
    environment["NOT_CRAN"] = "true"
    environment["SPARK_HOME"] = sparkHome
    environment["H2O_CLIENT_IP"] = InetAddress.getLocalHost().hostAddress
    environment['spark.ext.h2o.backend.cluster.mode'] = detectBackendClusterMode()

    workingDir file("src/tests")
    commandLine getOsSpecificCommandLine(['R', '-f', 'testthat.R'])
}

task installH2ORPackage(type: Exec) {
    def majorName = (h2oMajorName == "master") ? "master" : "rel-${h2oMajorName}"
    commandLine getOsSpecificCommandLine(["R", "-e", "install.packages(\"h2o\", type = \"source\", repos = \"http://h2o-release.s3.amazonaws.com/h2o/${majorName}/${h2oBuild}/R\")"])
}

task installRSparklingPackage(type: Exec, dependsOn: distR) {
    workingDir project.buildDir
    commandLine getOsSpecificCommandLine(["R", "-e", "install.packages(\"rsparkling_${version}.tar.gz\", type=\"source\", repos=NULL)"])
}

task prepareRepoDir(dependsOn: distR) {
    doLast {
        contribDir.mkdirs()
        copy {
            from("${project.buildDir}/rsparkling_${version}.tar.gz")
            into "$contribDir"
        }
    }
}

task createCranRepo(type: Exec, dependsOn: prepareRepoDir){
    workingDir contribDir
    commandLine getOsSpecificCommandLine(["R", "-e", "tools::write_PACKAGES()"])
}

clean.dependsOn cleanR

check.dependsOn test

test.dependsOn checkSparkVersionTask

build.dependsOn createCranRepo

build.dependsOn distR
