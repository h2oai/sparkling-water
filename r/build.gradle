apply from: "$rootDir/gradle/utils.gradle"

description = "RSparkling - Sparkling-Water R Package"

configurations {
  sparklingWaterAssemblyJar
  apiGeneration
}

dependencies {
  sparklingWaterAssemblyJar project(path: ':sparkling-water-assembly', configuration: 'shadow')
  apiGeneration "org.scala-lang:scala-library:${scalaVersion}"
  apiGeneration project(path: ':sparkling-water-api-generation', configuration: 'shadow')
  apiGeneration project(path: ':sparkling-water-assembly', configuration: 'shadow')
  apiGeneration "org.apache.spark:spark-repl_${scalaBaseVersion}:${sparkVersion}"
}

ext {
  contribDir = file("${project.buildDir}/repo/src/contrib")
}

def copyRSetup() {
  file(project.buildDir).mkdir()
  copy {
    from file("src")
    into new File(project.buildDir, "src")

    filter {
      it.replaceAll("SUBST_SW_VERSION", version)
    }
    exclude("R")
  }

  copy {
    from fileTree("src/R").include("**/*.R").files
    into file("${project.buildDir}/src/R")
  }

  copy {
    from fileTree("src-gen/R").include("**/*.R").files
    into file("${project.buildDir}/src/R")
  }

  // Copy sparkling water assembly jar
  def fatJar = configurations.sparklingWaterAssemblyJar.singleFile
  copy {
    from fatJar
    into file("${project.buildDir}/src/inst/java")
    rename ".*", "sparkling_water_assembly.jar"
  }
  createBuildInfoFile("${project.buildDir}/src/inst/")
}

def createBuildInfoFile(String basePath) {
  def f = file("${basePath}/buildinfo.txt")
  f.write("${h2oVersion}\n")
  f.append("${h2oMajorName}\n")
  f.append("${h2oBuild}\n")
  f.append("${version}")
}

task cleanR(type: Delete) {
  delete getBuildDir()
}

task distR(type: Exec, dependsOn: [configurations.sparklingWaterAssemblyJar, cleanR]) {
  doFirst {
    copyRSetup()
  }
  workingDir project.buildDir
  commandLine getOsSpecificCommandLine(['R', 'CMD', 'build', 'src'])
}

task test(type: Exec, dependsOn: distR) {
  environment["spark.version"] = sparkVersion
  environment["SPARK_HOME"] = sparkHome
  environment['spark.ext.h2o.backend.cluster.mode'] = detectBackendClusterMode()

  workingDir "${project.buildDir}/src"
  def testCmd = "library(sparklyr);library(devtools);devtools::test(stop_on_failure = TRUE)"
  commandLine getOsSpecificCommandLine(["R", "-e", testCmd])
}

task installH2ORPackage(type: Exec) {
  def majorName = (h2oMajorName == "master") ? "master" : "rel-${h2oMajorName}"
  def installCmd = "install.packages(\"h2o\", type = \"source\", repos = \"http://h2o-release.s3.amazonaws.com/h2o/${majorName}/${h2oBuild}/R\")"
  commandLine getOsSpecificCommandLine(["R", "-e", installCmd])
}

task installRSparklingPackage(type: Exec, dependsOn: distR) {
  workingDir project.buildDir
  def installCmd =  "install.packages(\"rsparkling_${version}.tar.gz\", type=\"source\", repos=NULL)"
  commandLine getOsSpecificCommandLine(["R", "-e", installCmd])
}

task prepareRepoDir(dependsOn: distR) {
  doLast {
    contribDir.mkdirs()
    copy {
      from("${project.buildDir}/rsparkling_${version}.tar.gz")
      into "$contribDir"
    }
  }
}

task createCranRepo(type: Exec, dependsOn: prepareRepoDir) {
  workingDir contribDir
  commandLine getOsSpecificCommandLine(["R", "-e", "tools::write_PACKAGES()"])
}

task cleanGeneratedApi(type: Delete) {
  delete "$projectDir/src-gen"
}

task generateConf(type: JavaExec, dependsOn: [cleanGeneratedApi, ':sparkling-water-api-generation:build']) {
  group = "Execution"
  classpath = files(* (configurations.apiGeneration.files as List))
  main = "ai.h2o.sparkling.api.generation.ConfigurationRunner"
  args = ["$projectDir/src-gen/R/ai/h2o/sparkling", "R"]
  standardOutput = System.out
  errorOutput = System.err
}

clean.dependsOn cleanR

check.dependsOn test

test.dependsOn checkSparkVersionTask

build.dependsOn createCranRepo

distR.dependsOn generateConf
build.dependsOn distR
