//
// Sparkling Water build file.
// This is a multi-module build file.
//

// The build script settings to fetch plugins and put them on
// classpath
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/releashaus/release" }
    }

    dependencies {
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1'
        classpath 'com.bmuschko:gradle-docker-plugin:3.4.4'
    }
}

plugins {
    id 'base'
    id 'net.researchgate.release' version '2.6.0'
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "kr.motd.sphinx" version "2.2.2"
    id 'nebula.lint' version '9.3.2'
}


// For multiproject setup we have to apply release plugin here (we share same release number cross all modules)
if (project.hasProperty("doRelease")) {
    apply from: 'gradle/release.gradle'
}

//
// Common configuration
//
ext {
    // Published projects
    publishedProjects = [
      project(':sparkling-water-repl'),
      project(':sparkling-water-core'),
      project(':sparkling-water-examples'),
      project(':sparkling-water-ml'),
      project(':sparkling-water-package'),
      project(":sparkling-water-doc")
    ]
    // Project with integration tests
    integTestProjects = [
      project(':sparkling-water-core'),
      project(':sparkling-water-examples')
    ]
    // Scala projects
    scalaProjects = [
      project(':sparkling-water-repl'),
      project(':sparkling-water-core'),
      project(':sparkling-water-examples'),
      project(':sparkling-water-ml'),
      project(':sparkling-water-app-streaming'),
      project(':sparkling-water-package')
    ]
    javaProjects = [
      project(':sparkling-water-extension-stack-trace')
    ]
    // Python projects
    pythonProjects = [
      project(':sparkling-water-py')
    ]
    docProjects = [
      project(':sparkling-water-doc')
    ]

    defaultScalaBaseVersion = '2.11'
    supportedScalaBaseVersions = ['2.11' : '2.11.12']
}

//
// For all projects (this and all subprojects) specify common properties and tasks
//
configure(allprojects) { project ->
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply from: "$rootDir/gradle/artifacts.gradle"
    apply plugin: 'nebula.lint'
    gradleLint.rules = ['all-dependency']
    gradleLint.alwaysRun = false // Run linter manually

    // Version of main components
    ext {
      scalaBaseVersion   = project.findProperty('scalaBaseVersion') ?: defaultScalaBaseVersion
      scalaVersion       = supportedScalaBaseVersions[scalaBaseVersion]

      // h2oBuild property is defined in gradle.properties
      h2oVersion         = "$h2oMajorVersion.$h2oBuild"
      sparkVersion       = "$sparkVersion"
      junitVersion       = '4.11'
    }
}

// 
// Common configuration for all subprojects
//
configure(subprojects) { project ->
    // All project inherits the same versioning number
    version = rootProject.version

    repositories {
        // Should be enabled only in development mode
        if (h2oBuild == '99999' || project.hasProperty('useMavenLocal') || h2oBuild.endsWith("-SNAPSHOT")) {
            mavenLocal()
        }

        mavenCentral()
        jcenter()
        
        // Public Sonatype repository
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }

        // Snapshot repository of H2O builds
        maven {
            url "http://h2o-release.s3.amazonaws.com/h2o/master/$h2oBuild/maven/repo/"
        }

        // We add the local nexus repository because of mojo2. It is defined as the last one so all the artifacts are
        // resolved from public repositories first
        maven {
            url "$localNexusLocation/releases/"
            credentials {
                username project.findProperty("localNexusUsername") ?: "<NA>"
                password project.findProperty("localNexusPassword") ?: "<NA>"
            }
        }
    }

    if (project in scalaProjects) {
      apply from: "$rootDir/gradle/scala.gradle"
    }
    if (project in pythonProjects) {
      apply from: "$rootDir/gradle/python.gradle"
    }

    if(project in javaProjects) {
        apply plugin: 'java'

        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    // All subprojects needs Spark support
    apply from: "$rootDir/gradle/spark.gradle"

    if (project in docProjects){
        apply plugin: 'java'
        apply plugin: 'kr.motd.sphinx'
        
        configurations {
            publishArchives
        }
    }

    // Publish artifacts
    if (project in publishedProjects) {
        apply from: "$rootDir/gradle/publish.gradle"
    }

    if (project in integTestProjects) {
        apply from: "$rootDir/gradle/itest.gradle"
    }
}


task buildSparklingWaterDist(type: Exec, dependsOn:
        ["sparkling-water-assembly:shadowJar"] + // Build Java/Scala
        ["sparkling-water-templates:build"] + // Build templates
        ["sparkling-water-py:distPython"] +
        getTasksByName("javadoc", true) + // Build javadoc
        getTasksByName("scaladoc", true) + // Build scaladoc
        getTasksByName("site", true)) {

    def buildTimeMillis = System.currentTimeMillis();
    def buildTimeIso8601 = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
    def buildTimeLocal = new Date()

    environment['BUILD_TIME_MILLIS'] = buildTimeMillis
    environment['BUILD_TIME_ISO8601'] = buildTimeIso8601
    environment['BUILD_TIME_LOCAL'] = buildTimeLocal

    commandLine './make-dist.sh'
}

task dist(dependsOn: buildSparklingWaterDist)

clean.doFirst {
  delete file("build/")
  delete file("h2ologs/")
  delete file("null/")
  delete file("metastore_db/")
}

