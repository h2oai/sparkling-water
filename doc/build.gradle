description = "Sparkling Water Documentation"

apply from: "$rootDir/gradle/utils.gradle"

import static groovy.io.FileType.FILES
import org.gradle.util.VersionNumber

dependencies {
  implementation("org.scala-lang:scala-library:${scalaVersion}")
  implementation(project(':sparkling-water-utils'))
  implementation(project(':sparkling-water-ml'))
  implementation("org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}")
}

task cleanDoc(type: Delete) {
  delete getBuildDir()
}

task createVersionFile {
  doLast {
    if (!buildDir.exists()) {
      buildDir.mkdir()
    }

    File version_file = new File(buildDir, "project_version")
    def version_txt = version
    version_file.write(version_txt)
  }
}

/**
 * We can't use Sphinx substitutions in for example code blocks and other container, so we post-process
 * the generated files manually
 */
task substitute() {
  doLast {
    def siteDir = "${buildDir}/site"

    new File(siteDir).eachFileRecurse(FILES) {
      if (it.name.endsWith('.html')) {
        def contents = file(it).getText('UTF-8')
        contents = contents
          .replaceAll("SUBST_SCALA_BASE_VERSION", scalaBaseVersion)
          .replaceAll("SUBST_SW_VERSION", version)
          .replaceAll("SUBST_SPARK_VERSION", sparkVersion)
          .replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkMajorVersion)
          .replaceAll("SUBST_H2O_VERSION", h2oVersion)
          .replaceAll("SUBST_H2O_RELEASE_NAME", h2oMajorName)
          .replaceAll("SUBST_H2O_BUILD_NUMBER", h2oBuild)
          .replaceAll("SUBST_MIN_SUPPORTED_JAVA", minSupportedJavaVersion)
          .replaceAll("SUBST_EMR_VERSION", supportedEmrVersion)
          .replaceAll("SUBST_SCALA_BASE_VERSION", scalaBaseVersion)
          .replaceAll("SUBST_H2O_DRIVERS_LIST", getSupportedHadoopDistributions(h2oMajorName, h2oBuild))
          .replaceAll("SUBST_EXECUTOR_MEMORY_OVERHEAD", executorOverheadMemoryOption)
          .replaceAll("SUBST_DRIVER_MEMORY_OVERHEAD", driverOverheadMemoryOption)
        file(it).write(contents, 'UTF-8')
      }
    }
  }
}

task deleteDocTrees(type: Delete) {
  delete "${buildDir}/site/.doctrees"
}

task cleanGeneratedDoc(type: Delete) {
  delete "${projectDir}/src/site/sphinx/parameters"
}

task cleanGeneratedConfiguration(type: Delete) {
  delete "${projectDir}/src/site/sphinx/configuration/configuration_properties.rst"
}

task generateAlgorithmParameters(type: JavaExec, dependsOn: [cleanGeneratedDoc, build]) {
  group = "Execution"
  classpath = sourceSets.main.runtimeClasspath
  main = "ai.h2o.sparkling.doc.generation.Runner"
  args = ["${projectDir}/src/site/sphinx/parameters"]
  standardOutput = System.out
  errorOutput = System.err
}

task generateConfiguration(type: JavaExec, dependsOn: [cleanGeneratedConfiguration, build]) {
  group = "Execution"
  classpath = sourceSets.main.runtimeClasspath
  main = "ai.h2o.sparkling.doc.generation.ConfigurationRunner"
  args = ["${projectDir}/src/site/sphinx/configuration"]
  standardOutput = System.out
  errorOutput = System.err
}

sphinx {
  environments = ["PYTHONWARNINGS" : ""]
  if (VersionNumber.parse(sparkVersion) >= VersionNumber.parse(kubernetesSupportSinceSpark)) {
    tags = "SupportsKubernetes"
  }
  warningsAsErrors = true
}

task docJar(type: Jar) {
  from "${buildDir}"
  archiveClassifier = "site"
  include "site/**"
  archiveBaseName = "${project.name}_${scalaBaseVersion}"
}

task sourcesDocJar(type: Jar) {
  archiveClassifier = "site-sources"
  from "${projectDir}"
  include "src/**"
  archiveBaseName = "${project.name}_${scalaBaseVersion}"


  from "${projectDir}"
  include "CHANGELOG.rst"
}

task openSite {
  doFirst {
    def sitePath = "file://" + project.buildDir.toString() + "/site/index.html"
    if (file(sitePath).exists()) {
      java.awt.Desktop.desktop.browse sitePath.toURI()
    } else {
      throw new IllegalArgumentException("Documentation is not available, please build it first by running ./gradlew site")
    }
  }
}


artifacts {
  publishArchives docJar
  publishArchives sourcesDocJar
}

cleanDoc.dependsOn cleanGeneratedDoc
publish.dependsOn site
createVersionFile.dependsOn cleanDoc
sphinx.dependsOn generateAlgorithmParameters
sphinx.dependsOn createVersionFile
sphinx.dependsOn generateConfiguration
clean.dependsOn cleanDoc
substitute.dependsOn sphinx
deleteDocTrees.dependsOn substitute
docJar.dependsOn sourcesDocJar, deleteDocTrees
site.dependsOn docJar

defineStandardPublication().call()
