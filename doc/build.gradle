description = "Sparkling Water Documentation"

import static groovy.io.FileType.FILES

task cleanDoc(type: Delete) {
    delete getBuildDir()
}

task createVersionFile {
    doLast {
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }
        File version_file = new File(buildDir, "project_version")
        def version_txt = version.replace("-SNAPSHOT", "")
        version_file.write(version_txt)
    }
}

/**
 * We can't use Sphinx substitutions in for example code blocks and other container, so we post-process
 * the generated files manually
 */
task substitute(){
    doLast {
        def siteDir = "${buildDir}/site"

        new File(siteDir).eachFileRecurse(FILES) {
            if (it.name.endsWith('.html')) {
                def contents = file(it).getText('UTF-8')
                contents = contents
                        .replaceAll("SUBST_SW_VERSION", version.replace("-SNAPSHOT", ""))
                        .replaceAll("SUBST_H2O_VERSION", h2oVersion)
                        .replaceAll("SUBST_H2O_RELEASE_NAME", h2oMajorName)
                        .replaceAll("SUBST_H2O_BUILD_NUMBER", h2oBuild)
                file(it).write(contents, 'UTF-8')
            }
        }
    }
}

task docJar(type: Jar) {
    from "${buildDir}"
    include "site/**"
    baseName = "${project.name}_${scalaBaseVersion}"
}

task sourcesDocJar(type: Jar){
    classifier = "sources"
    from "${projectDir}"
    include "src/**"
    baseName = "${project.name}_${scalaBaseVersion}"


    from "${projectDir}"
    include "CHANGELOG.rst"

}

createVersionFile.dependsOn cleanDoc
sphinx.dependsOn createVersionFile
clean.dependsOn cleanDoc
substitute.dependsOn sphinx
sourcesDocJar.dependsOn substitute
docJar.dependsOn sourcesDocJar
site.dependsOn docJar