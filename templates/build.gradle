description = "Templates for Sparkling Water deployment"

apply plugin: 'base'
apply from: "$rootDir/gradle/utils.gradle"


/**
 * We can't use Sphinx substitutions in for example code blocks and other container, so we post-process
 * the generated files manually
 */
task substituteAWS(){
    doLast {
        def aws_script = "${project.buildDir.toString()}/aws/install_sparkling_water_${version}.sh"
        def contents = file(aws_script).getText('UTF-8')
        
        contents = contents
                .replaceAll("SUBST_S3_BUCKET", getS3Bucket())
                .replaceAll("SUBST_SW_VERSION", version)

        file(aws_script).write(contents, 'UTF-8')
    }
}

task substituteTerraform(){
    doLast {
        def tfBaseDir = "${project.buildDir.toString()}/terraform/aws/"
        def tfScripts = ["${tfBaseDir}/variables.tf", "${tfBaseDir}/modules/emr/variables.tf", "${tfBaseDir}/modules/emr/main.tf"]
        tfScripts.each { path ->
            def contents = file(path).getText('UTF-8')
            def (first, second, third) = version.tokenize(".")
            def majorVersion = "${first}.${second}"
            def minorVersion = third
            contents = contents
                    .replaceAll("SUBST_EMR_VERSION", supportedEmrVersion)
                    .replaceAll("SUBST_SW_MAJOR_VERSION", majorVersion)
                    .replaceAll("SUBST_SW_PATCH_VERSION", minorVersion)
                    .replaceAll("SUBST_SPARK_MAJOR_VERSION", sparkMajorVersion)

            file(path).write(contents, 'UTF-8')
        }
    }
}

task cleanTemplates(type: Delete) {
    delete getBuildDir()
}

task copyAWS(type: Copy) {
    from 'src/aws'
    into "build/aws"
    rename "install_sparkling_water.sh", "install_sparkling_water_${version}.sh"
}

task copyTerraform(type: Copy) {
    from 'src/terraform'
    include "**/*.tf"
    into "build/terraform"
}

copyTerraform.dependsOn cleanTemplates
copyAWS.dependsOn cleanTemplates
substituteAWS.dependsOn copyAWS
substituteTerraform.dependsOn copyTerraform
build.dependsOn substituteAWS, substituteTerraform
