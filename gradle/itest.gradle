apply from: "$rootDir/gradle/utils.gradle"

sourceSets {
    integTest {
        scala {
            srcDirs = ['src/integTest/scala', 'src/main/scala']
        }
        resources {
            srcDirs = ['src/integTest/resources', 'src/main/resources']
        }

        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integTestImplementation.extendsFrom testImplementation
    integTestRuntimeOnly.extendsFrom testRuntimeOnly
    sparklingWaterAssemblyJar
}

dependencies {
    sparklingWaterAssemblyJar(project(path: ':sparkling-water-assembly', configuration: 'shadow'))
}

// Create jar containing integration test classes
task integTestJar(type: Jar, dependsOn: integTestClasses) {
    group = "Build"
    description = "Assembles a jar archive with integration test classes."
    archiveBaseName = "${project.name}_${scalaBaseVersion}"
    archiveAppendix = 'itest'
    from sourceSets.integTest.output
}

task integTest(type: Test) {
    group = 'Verification'
    description = 'Runs all integration tests'
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath

    //
    // Defaults shared by all integration tests
    //

    // Run with assertions ON
    enableAssertions = true
    // For a new JVM for each test class
    forkEvery = 1
    // Working dir will be root project
    workingDir = rootDir
    // Increase test runner memory
    maxHeapSize = "4g"

    systemProperty "spark.ext.h2o.node.log.dir", new File(project.getBuildDir(), "h2ologs-itest/nodes")
    systemProperty "spark.ext.h2o.client.log.dir", new File(project.getBuildDir(), "h2ologs-itest/client")
    systemProperty "spark.ext.h2o.external.disable.version.check", "true"
    systemProperty "spark.ext.h2o.backend.cluster.mode", detectBackendClusterMode()
    systemProperty "spark.testing", "true"
    systemProperty "spark.test.home", "${sparkHome}"
    systemProperty "sparkling.test.hdp.version", "${hdpVersion}"
    systemProperty "spark.driver.extraJavaOptions", "-Dhdp.version=${hdpVersion}"
    systemProperty "spark.yarn.am.extraJavaOptions", "-Dhdp.version=${hdpVersion}"
    systemProperty "spark.executor.extraJavaOptions", "-Dhdp.version=${hdpVersion}"

    // Pass list of jars required for testing
    systemProperty "sparkling.assembly.jar", "${configurations.sparklingWaterAssemblyJar.singleFile}"
    systemProperty "sparkling.itest.jar", "${integTestJar.getArchiveFile().get().asFile.toString()}"

    // Show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // Also setup expected Scala version for Spark launcher
    environment "SPARK_SCALA_VERSION", "$scalaBaseVersion"
}


// Run integration tests as part of build
check.dependsOn integTest

// Dependencies
integTest.dependsOn integTestJar
