import org.gradle.api.tasks.testing.logging.TestExceptionFormat

apply from: "$rootDir/gradle/utils.gradle"

sourceSets {
    integTest {
        scala {
            srcDirs = ['src/integTest/scala', 'src/main/scala']
        }
        resources {
            srcDirs = ['src/integTest/resources', 'src/main/resources']
        }

        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integTestImplementation.extendsFrom testImplementation
    integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integTest(type: Test) {
    group = 'Verification'
    description = 'Runs all integration tests'
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath

    // Run with assertions ON
    enableAssertions = true
    // For a new JVM for each test class
    forkEvery = 1
    // Working dir will be root project
    workingDir = rootDir
    // Increase test runner memory
    maxHeapSize = "4g"

    systemProperty "spark.ext.h2o.log.dir", new File(project.getBuildDir(), "h2ologs-itest/nodes")
    systemProperty "spark.ext.h2o.external.disable.version.check", "true"
    systemProperty "spark.ext.h2o.backend.cluster.mode", detectBackendClusterMode()
    systemProperty "spark.testing", "true"
    systemProperty "spark.test.home", "${sparkHome}"

    // Also setup expected Scala version for Spark launcher
    environment "SPARK_SCALA_VERSION", "$scalaBaseVersion"

    testLogging {
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL

        // Show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true
    }
}


// Run integration tests as part of build
check.dependsOn integTest
