apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "signing"

// Container for generated POMs (by default added into archive configuration)
configurations {
    pom {
        transitive = false
    }
}

// Sources Jar generation
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Javadoc Jar generation
task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

configurations {
    toPublish
}

artifacts {
    toPublish sourcesJar
    toPublish javadocJar
    toPublish scaladocJar
}

//
// Record all generated POM files for given publishing task
//
project.tasks.whenTaskAdded({ t ->
    // This is adhoc specific task for defined publication
    if (t.name.contains('generatePomFileForMavenAll')) {
        t.doLast({ tt ->
            artifacts {
                pom file(t.destination)
            }
        })
    }
})


task signAll(type: Sign) {
    sign configurations.archives
    // Sign also additional artifacts
    sign configurations.toPublish
    // Sign only in case of release
    required = project.hasProperty("doRelease")
}

publishing {
    publications {

        mavenAll(MavenPublication) {
            artifactId project.name + "_" + scalaBaseVersion
            // Publish all artifacts
            // NOTE: needs to be here to create a POM file with correct dependencies
            from components.java

            // Publish additional artifacts as documentation or source code
            configurations.toPublish.allArtifacts.each { art ->
                logger.debug("Publishing artifact for: " + art)
                artifact art
            }
            if (signAll.required) {
                signAll.signatures.all { Signature signature ->
                    logger.debug("Publishing signature for: " + signature.file + ", type=" + signature.type)
                    artifact(signature, new Action<MavenArtifact>() {
                        @Override
                        void execute(MavenArtifact t) {
                            t.classifier = signature.toSignArtifact.classifier != "" ? signature.toSignArtifact.classifier : null
                            t.extension = signature.type == "xml.asc" ? "pom.asc" : signature.type
                        }
                    })
                }
            }


            pom.withXml { provider ->
                asNode().children().last() + {
                    // See https://discuss.gradle.org/t/some-elements-are-removed-when-generate-a-pom-xml-using-the-maven-publish-plugin/2073/4
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name project.name + "_" + scalaBaseVersion
                    description project.description
                    url 'https://github.com/h2oai/sparkling-water'
                    inceptionYear '2013'

                    organization {
                        name 'H2O.ai'
                        url 'http://h2o.ai/'
                    }

                    // H2O licensing
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    // Info for contributors
                    scm {
                        url 'https://github.com/h2oai/sparkling-water'
                        connection 'scm:git:https://github.com/h2oai/sparkling-water.git'
                        developerConnection 'scm:git:git@github.com:h2oai/sparkling-water.git'
                    }

                    // Public H2O JIRA for issue management
                    issueManagement {
                        system 'Jira'
                        url 'http://jira.h2o.ai'
                    }

                    // Developer information
                    developers {
                        developer {
                            id 'support'
                            name 'H2O.ai Support'
                            email 'support@h2o.ai'
                        }
                    }
                }
            }
        }
    }

    repositories {

        maven {
            name "BuildRepo"
            url "$rootDir/build/repo"
        }

        if (project.hasProperty("doRelease")) {
            maven {
                name "SonatypeRelease"
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

                credentials {
                    username project["nexusUsername"]
                    password project["nexusPassword"]
                }
            }
        }

        // Setup local repo only for internal builds
        def isInternalBuild = Boolean.valueOf(project.findProperty("isInternalBuild") ?: "false")
        if (isInternalBuild) {
            maven {
                name "LocalNexusRepo"
                if (project.hasProperty("doRelease")) {
                    url "${localNexusLocation}/releases"
                } else {
                    url "${localNexusLocation}/snapshots"
                }

                credentials {
                    username project.findProperty("localNexusUsername") ?: "<NA>"
                    password project.findProperty("localNexusPassword") ?: "<NA>"
                }
            }
        }
    }
}

