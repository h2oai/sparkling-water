apply plugin: 'maven-publish'
apply plugin: "signing"

/**
 * Define the repositories for the publishing plugin and the type of publications which subprojects can use
 */

def getPomSpecification() {
    return {
        name = project.name + "_" + scalaBaseVersion
        afterEvaluate {
            description = project.description
        }
        url = 'https://github.com/h2oai/sparkling-water'
        inceptionYear = '2013'

        organization {
            name = 'H2O.ai'
            url = 'http://h2o.ai/'
        }
        licenses {
            license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
            }
        }
        scm {
            url = 'https://github.com/h2oai/sparkling-water'
            connection = 'scm:git:https://github.com/h2oai/sparkling-water.git'
            developerConnection = 'scm:git:git@github.com:h2oai/sparkling-water.git'
        }
        issueManagement {
            system = 'Jira'
            url = 'http://jira.h2o.ai'
        }
        developers {
            developer {
                id = 'support'
                name = 'H2O.ai Support'
                email = 'support@h2o.ai'
            }
        }
    }
}

def defineShadowPublication() {
    return {
        publishing {
            publications {
                shadow(MavenPublication) { publication ->
                    project.shadow.component(publication)
                    artifactId project.name + "_" + scalaBaseVersion

                    // Publish additional artifacts as documentation or source code
                    configurations.publishArchives.allArtifacts.each { art ->
                        logger.debug("Publishing artifact for: " + art)
                        artifact art
                    }

                    pom getPomSpecification()
                }
            }
        }
    }
}

def defineStandardPublication() {
    return {
        publishing {
            publications {
                mavenAll(MavenPublication) {
                    from components.java
                    artifactId project.name + "_" + scalaBaseVersion

                    // Publish additional artifacts as documentation or source code
                    configurations.publishArchives.allArtifacts.each { art ->
                        logger.debug("Publishing artifact for: " + art)
                        artifact art
                    }

                    pom getPomSpecification()
                }
            }
        }
    }
}

ext {
    defineStandardPublication = this.&defineStandardPublication
    defineShadowPublication = this.&defineShadowPublication
}

publishing {
    repositories {

        maven {
            name "BuildRepo"
            url "$rootDir/build/repo"
        }

        // Setup local repo only for internal builds
        def isInternalBuild = Boolean.valueOf(project.findProperty("isInternalBuild") ?: "false")
        if (isInternalBuild) {
            maven {
                name "LocalNexusRepo"
                if (project.hasProperty("doRelease")) {
                    url "${localNexusLocation}/releases"
                } else {
                    url "${localNexusLocation}/snapshots"
                }

                credentials {
                    username project.findProperty("localNexusUsername") ?: "<NA>"
                    password project.findProperty("localNexusPassword") ?: "<NA>"
                }
            }
        }
    }
}

signing {
    required {
        project.hasProperty("doRelease")
    }
    sign publishing.publications
}
