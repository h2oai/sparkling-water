apply plugin: 'maven-publish'
apply plugin: "signing"

/**
 * This plugin works by naming convention.
 *
 * It publishes by default java jar package and it also
 * expects publishArchives configuration and publishes whatever is inside it.
 */

// Container for generated POMs (by default added into archive configuration)
configurations {
    pom {
        transitive = false
    }
}

//
// Record all generated POM files for given publishing task
//
project.tasks.whenTaskAdded({ t ->
    // This is adhoc specific task for defined publication
    if (t.name.contains('generatePomFileForMavenAll')) {
        t.doLast({ tt ->
            artifacts {
                pom file(t.destination)
            }
        })
    }
})

if(project.name == "sparkling-water-doc") {
    publish.dependsOn project.getTasksByName("site", false)
}

publishing {
    publications {

        mavenAll(MavenPublication) {
            artifactId project.name + "_" + scalaBaseVersion
            // Publish all artifacts
            // NOTE: needs to be here to create a POM file with correct dependencies
            from components.java

            // Publish additional artifacts as documentation or source code
            configurations.publishArchives.allArtifacts.each { art ->
                logger.debug("Publishing artifact for: " + art)
                artifact art
            }


            pom {
                name = project.name + "_" + scalaBaseVersion
                description = project.description
                url = 'https://github.com/h2oai/sparkling-water'
                inceptionYear = '2013'

                organization {
                    name = 'H2O.ai'
                    url = 'http://h2o.ai/'
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/h2oai/sparkling-water'
                    connection = 'scm:git:https://github.com/h2oai/sparkling-water.git'
                    developerConnection = 'scm:git:git@github.com:h2oai/sparkling-water.git'
                }
                issueManagement {
                    system = 'Jira'
                    url = 'http://jira.h2o.ai'
                }
                developers {
                    developer {
                        id = 'support'
                        name = 'H2O.ai Support'
                        email = 'support@h2o.ai'
                    }
                }
            }
        }
    }

    repositories {

        maven {
            name "BuildRepo"
            url "$rootDir/build/repo"
        }

        if (project.hasProperty("doRelease")) {
            maven {
                name "SonatypeRelease"
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

                credentials {
                    username project["nexusUsername"]
                    password project["nexusPassword"]
                }
            }
        }

        // Setup local repo only for internal builds
        def isInternalBuild = Boolean.valueOf(project.findProperty("isInternalBuild") ?: "false")
        if (isInternalBuild) {
            maven {
                name "LocalNexusRepo"
                if (project.hasProperty("doRelease")) {
                    url "${localNexusLocation}/releases"
                } else {
                    url "${localNexusLocation}/snapshots"
                }

                credentials {
                    username project.findProperty("localNexusUsername") ?: "<NA>"
                    password project.findProperty("localNexusPassword") ?: "<NA>"
                }
            }
        }
    }
}

signing {
    required {
        project.hasProperty("doRelease")
    }
    sign publishing.publications
}


