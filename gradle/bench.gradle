import org.gradle.api.tasks.testing.logging.TestExceptionFormat

sourceSets {
    bench {
        scala.srcDir file('src/bench/scala')
        resources.srcDir file('src/bench/resources')

        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    benchImplementation.extendsFrom testImplementation
    benchRuntimeOnly.extendsFrom testRuntimeOnly
}


task bench(type: Test) {
    group = 'Verification'
    description = 'Runs all benchmarks'
    testClassesDirs = sourceSets.bench.output.classesDirs
    classpath = sourceSets.bench.runtimeClasspath

    //
    // Defaults shared by all benchmarks
    //

    // Run with assertions ON
    enableAssertions = true
    // For a new JVM for each test class
    forkEvery = 1
    // Working dir will be root project
    workingDir = rootDir
    // Increase test runner memory
    maxHeapSize = "4g"

    systemProperty "spark.ext.h2o.log.dir", new File(project.getBuildDir(), "h2ologs-test")

    include "ai/h2o/sparkling/bench/**"

    // Also setup expected Scala version for Spark launcher
    environment "SPARK_SCALA_VERSION", "$scalaBaseVersion"

    testLogging {
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

// Create jar containing bench classes
task benchJar(type: Jar, dependsOn: benchClasses) {
    group = "Build"
    description = "Assembles a jar archive with benchmark classes."
    archiveBaseName = "${project.name}_${scalaBaseVersion}"
    archiveAppendix = 'bench'
    from sourceSets.bench.output
}

// Run benchmarks as a part of build
check.dependsOn bench

// Dependencies
bench.dependsOn benchJar
