apply plugin: 'base'
apply plugin: 'com.bmuschko.docker-remote-api'
apply from: "$rootDir/gradle/scala.gradle"

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import org.gradle.util.VersionNumber

description = "Build docker images for Kubernetes with Sparkling Water"

dependencies {
  api(project(path: ':sparkling-water-assembly'))
  compileOnly("org.apache.spark:spark-core_${scalaBaseVersion}:${sparkVersion}")
  compileOnly("org.apache.spark:spark-mllib_${scalaBaseVersion}:${sparkVersion}")
  compileOnly("org.scala-lang:scala-compiler:${scalaVersion}")
}

ext {
  outputFilePython = file("$buildDir/dist/Dockerfile-Python")
  outputFileR = file("$buildDir/dist/Dockerfile-R")
  outputFileScala = file("$buildDir/dist/Dockerfile-Scala")
}

task createScalaDockerfile(type: Dockerfile) {
  destFile = outputFileScala
  arg "spark_version"
  from 'spark:$spark_version'
  copyFile("sparkling-water-assembly_2.11-${version}-all.jar", "/opt/spark/jars/sparkling-water-assembly_2.11-${version}-all.jar")
  copyFile("scala/initTest.jar", "/opt/sparkling-water/tests/initTest.jar")
}

task createRDockerfile(type: Dockerfile) {
  destFile = outputFileR
  arg "spark_version"
  from 'spark-r:$spark_version'
  if (VersionNumber.parse(sparkVersion) >= VersionNumber.parse("2.4.5")) {
    runCommand "apt-get install -y libc-dev libssl-dev libcurl4-openssl-dev g++ libxml2-dev"
  } else {
    runCommand "apk add libc-dev linux-headers g++ libxml2-dev"
  }
  runCommand """\\
                R -e 'install.packages("xml2", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("openssl", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("httr", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("bitops", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("RCurl", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("jsonlite", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("testthat", repos = "http://cran.us.r-project.org")' && \\
                R -e 'install.packages("sparklyr", repos = "http://cran.us.r-project.org")'
                """
  runCommand "R -e \"install.packages('h2o', type = 'source', repos = 'http://h2o-release.s3.amazonaws.com/h2o/rel-${h2oMajorName}/${h2oBuild}/R')\""
  copyFile("rsparkling_${version}.tar.gz", "/opt/spark/R/lib/rsparkling_${version}.tar.gz")
  runCommand "cd /opt/spark/R/lib && R CMD INSTALL rsparkling_${version}.tar.gz"
  copyFile("r/initTest.R", "/opt/sparkling-water/tests/initTest.R")
  copyFile("r/submit.R", "/opt/sparkling-water/tests/submit.R")
  runCommand """\\
              SPARKLYR_JARS=\$(R -e 'system.file("java/", package = "sparklyr")' 2>/dev/null | grep "\\[1\\]" | cut -d ' ' -f 2 | tr -d '"') && \\
              mkdir -p /opt/sparklyr && \\
              cp -R \${SPARKLYR_JARS}/java /opt/sparklyr
             """
}

task createPythonDockerfile(type: Dockerfile) {
  destFile = outputFilePython
  arg "spark_version"
  from 'spark-py:$spark_version'
  copyFile("h2o_pysparkling_${sparkMajorVersion}-${version}.zip", "/opt/spark/pyspark/python/lib/h2o_pysparkling_${sparkMajorVersion}-${version}.zip")
  runCommand "pip install /opt/spark/pyspark/python/lib/h2o_pysparkling_${sparkMajorVersion}-${version}.zip"
  if (VersionNumber.parse(sparkVersion) >= VersionNumber.parse("2.4.5")) {
    runCommand "pip install numpy"
  } else {
    runCommand """\\
                apk add build-base python-dev && \\
                pip install numpy && \\
                apk del build-base python-dev
                """
  }
  copyFile("python/initTest.py", "/opt/sparkling-water/tests/initTest.py")
}

task buildDockerfiles(dependsOn: [createPythonDockerfile, createRDockerfile, createScalaDockerfile])

task copyPythonExtras(type: Copy) {
  from 'src/python'
  into file("$buildDir/dist/python")
}

task copyRExtras(type: Copy) {
  from 'src/r'
  into file("$buildDir/dist/r")
}

jar {
  archiveBaseName = 'initTest'
  archiveVersion = ""
}

task copyScalaExtras(type: Copy) {
  from jar
  into file("$buildDir/dist/scala")
}
task prepareKubernetesFiles(dependsOn: [copyPythonExtras, copyRExtras, copyScalaExtras, buildDockerfiles])
