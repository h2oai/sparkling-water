#!/usr/bin/groovy
@Library('test-shared-library') _

// Job parameters
properties(
        [
                parameters(
                        [
                                booleanParam(name: 'runUnitTests', defaultValue: true, description: 'Run unit tests'),
                                booleanParam(name: 'runPyUnitTests', defaultValue: true, description: 'Run PyUnit tests'),
                                booleanParam(name: 'runRUnitTests', defaultValue: true, description: 'Run PyRUnit tests'),
                                booleanParam(name: 'runLocalIntegTests', defaultValue: true, description: 'Run local integration tests'),
                                booleanParam(name: 'runLocalPyIntegTests', defaultValue: true, description: 'Run local Python integration tests'),
                                booleanParam(name: 'runPySparklingIntegTests', defaultValue: true, description: 'Run pySparkling integration tests'),
                                choice(
                                        choices: 'both\ninternal\nexternal',
                                        description: "Choose in which mode to run tests",
                                        name: 'backendMode'
                                )
                        ]
                ),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)

cancelPreviousBuilds()

def pipeline
def sparkVersions
node("docker") {
    cleanWs()
    checkout scm
    pipeline = load 'jenkins/sparklingWaterPipeline.groovy'
    def versionLine = readFile("gradle.properties")
            .split("\n").find() { line -> line.startsWith('supportedSparkVersions') }
    sparkVersions = versionLine.split("=")[1].split(" ")

    if (isPrJob()) {
        // test PRs only on first and last supported Spark
        sparkVersions = [sparkVersions.first(), sparkVersions.last()]
    }
}


pipeline(params) { p ->
    sparkMajorVersions = sparkVersions
    runUnitTests = "${p.runUnitTests}"
    runPyUnitTests = "${p.runPyUnitTests}"
    runRUnitTests = "${p.runRUnitTests}"
    runLocalIntegTests = "${p.runLocalIntegTests}"
    runLocalPyIntegTests = "${p.runLocalPyIntegTests}"
    runPySparklingIntegTests = "${p.runPySparklingIntegTests}"
    buildAgainstH2OBranch = "true"
    h2oBranch = "master"
    uploadNightly = "false"
    backendMode = "${p.backendMode}"
}
